import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { InvoiceService } from '@/lib/invoice-service'
import { extractTokenFromHeaders, getUserFromToken } from '@/lib/auth'

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –í Next.js 15 params –Ω—É–∂–Ω–æ await
    const { id: invoiceId } = await params

    console.log('üîç –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞:', invoiceId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
    const adminToken = extractTokenFromHeaders(request.headers)
    if (adminToken) {
      const adminUser = getUserFromToken(adminToken)
      if (adminUser?.role === 'ADMIN') {
        console.log('üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏)
        const invoice = await prisma.balanceInvoice.findUnique({
          where: { id: invoiceId },
          include: {
            contract: {
              include: {
                client: {
                  include: {
                    legalEntities: true
                  }
                }
              }
            }
          }
        })

        if (!invoice) {
          console.log('‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', invoiceId)
          return NextResponse.json({ error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –∫–ª–∏–µ–Ω—Ç–∞
        const legalEntity = invoice.contract.client.legalEntities[0]

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        const invoiceData = {
          invoiceNumber: invoice.invoiceNumber,
          amount: invoice.amount,
          clientName: legalEntity?.shortName || invoice.contract.client.name || invoice.contract.client.phone,
          clientInn: legalEntity?.inn,
          clientAddress: legalEntity?.legalAddress,
          contractNumber: invoice.contract.contractNumber,
          description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É ${invoice.contract.contractNumber}`,
          dueDate: invoice.expiresAt
        }

        console.log('üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è —Å—á–µ—Ç–∞ (–∞–¥–º–∏–Ω):', invoice.invoiceNumber)

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        const pdfBuffer = await InvoiceService.generatePDF(invoiceData)

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF —Ñ–∞–π–ª
        const pdfUint8Array = new Uint8Array(pdfBuffer)
        
        return new NextResponse(pdfUint8Array, {
          status: 200,
          headers: {
            'Content-Type': 'application/pdf',
            'Content-Disposition': `attachment; filename*=UTF-8''invoice-${encodeURIComponent(invoice.invoiceNumber)}.pdf`,
            'Content-Length': pdfBuffer.length.toString(),
          },
        })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
    const token = extractTokenFromHeaders(request.headers)
    console.log('üîë –¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω:', token ? '–¥–∞' : '–Ω–µ—Ç')
    
    if (!token) {
      console.log('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–∏ –∞–¥–º–∏–Ω, –Ω–∏ –∫–ª–∏–µ–Ω—Ç)')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    let clientId: string | null = null

    // –ò–∑–≤–ª–µ–∫–∞–µ–º clientId –∏–∑ —Ç–æ–∫–µ–Ω–∞
    if (token.startsWith('client_')) {
      const tokenParts = token.split('_')
      if (tokenParts.length >= 2) {
        clientId = tokenParts[1]
        console.log('üë§ –ò–∑–≤–ª–µ—á–µ–Ω clientId:', clientId)
      }
    }

    if (!clientId) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞')
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞' }, { status: 401 })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    const invoice = await prisma.balanceInvoice.findUnique({
      where: { id: invoiceId },
      include: {
        contract: {
          include: {
            client: true
          }
        }
      }
    })

    if (!invoice) {
      console.log('‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', invoiceId)
      return NextResponse.json({ error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    console.log('üìã –°—á–µ—Ç –Ω–∞–π–¥–µ–Ω, –≤–ª–∞–¥–µ–ª–µ—Ü:', invoice.contract.client.id)
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', clientId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–∏–µ–Ω—Ç—É
    if (invoice.contract.client.id !== clientId) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—É')
      return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—É' }, { status: 403 })
    }

    // –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    const legalEntity = await prisma.clientLegalEntity.findFirst({
      where: { clientId: clientId }
    })

    console.log('üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ:', legalEntity?.shortName || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    const invoiceData = {
      invoiceNumber: invoice.invoiceNumber,
      amount: invoice.amount,
      clientName: legalEntity?.shortName || invoice.contract.client.name || invoice.contract.client.phone,
      clientInn: legalEntity?.inn,
      clientAddress: legalEntity?.legalAddress,
      contractNumber: invoice.contract.contractNumber,
      description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É ${invoice.contract.contractNumber}`,
      dueDate: invoice.expiresAt
    }

    console.log('üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è —Å—á–µ—Ç–∞:', invoice.invoiceNumber)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await InvoiceService.generatePDF(invoiceData)

    console.log('‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', pdfBuffer.length, '–±–∞–π—Ç')

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF —Ñ–∞–π–ª
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Buffer –≤ Uint8Array –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const pdfUint8Array = new Uint8Array(pdfBuffer)
    
    return new NextResponse(pdfUint8Array, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename*=UTF-8''invoice-${encodeURIComponent(invoice.invoiceNumber)}.pdf`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 