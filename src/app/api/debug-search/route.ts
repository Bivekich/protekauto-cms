import { NextRequest, NextResponse } from 'next/server'
import { autoEuroService } from '../../../lib/autoeuro-service'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const code = searchParams.get('code') || 'WHT005437'
    const brand = searchParams.get('brand') || 'SEAT'

    console.log('üß™ Debug Search - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { code, brand })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const searchResult = await autoEuroService.searchItems({
      code,
      brand,
      with_crosses: false,
      with_offers: true
    })

    console.log('üìä Debug Search - —Ä–µ–∑—É–ª—å—Ç–∞—Ç AutoEuro:', {
      success: searchResult.success,
      dataLength: searchResult.data?.length || 0,
      error: searchResult.error
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ –≤ —Ä–µ–∑–æ–ª–≤–µ—Ä–µ
    let externalOffers: any[] = []
    if (searchResult.success && searchResult.data) {
      externalOffers = searchResult.data.map(offer => ({
        offerKey: offer.offer_key,
        brand: offer.brand,
        code: offer.code,
        name: offer.name,
        price: parseFloat(offer.price.toString()),
        currency: offer.currency || 'RUB',
        deliveryTime: calculateDeliveryDays(offer.delivery_time || ''),
        deliveryTimeMax: calculateDeliveryDays(offer.delivery_time_max || ''),
        quantity: offer.amount || 0,
        warehouse: offer.warehouse_name || '–í–Ω–µ—à–Ω–∏–π —Å–∫–ª–∞–¥',
        supplier: 'AutoEuro',
        comment: '',
        weight: 0,
        volume: 0,
        canPurchase: true
      }))
    }

    console.log('üîç Debug Search - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', externalOffers.length)

    return NextResponse.json({
      success: true,
      params: { code, brand },
      autoEuroResult: {
        success: searchResult.success,
        dataCount: searchResult.data?.length || 0,
        error: searchResult.error
      },
      externalOffers: externalOffers.slice(0, 5),
      externalOffersCount: externalOffers.length
    })

  } catch (error) {
    console.error('‚ùå Debug Search - –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ø–∏—è –∏–∑ —Ä–µ–∑–æ–ª–≤–µ—Ä–∞)
const calculateDeliveryDays = (deliveryDateStr: string): number => {
  if (!deliveryDateStr) return 7

  try {
    const deliveryDate = new Date(deliveryDateStr)
    const today = new Date()
    const diffTime = deliveryDate.getTime() - today.getTime()
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    
    return Math.max(1, diffDays)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏:', error)
    return 7
  }
} 