interface YandexLocationDetectRequest {
  location: string;
}

interface YandexLocationDetectResponse {
  variants: {
    address: string;
    geo_id: number;
  }[];
}

interface YandexPickupPointsRequest {
  available_for_dropoff?: boolean;
  geo_id?: number;
  is_not_branded_partner_station?: boolean;
  is_post_office?: boolean;
  is_yandex_branded?: boolean;
  latitude?: {
    from: number;
    to: number;
  };
  longitude?: {
    from: number;
    to: number;
  };
  payment_method?: 'already_paid' | 'card_on_receipt';
  payment_methods?: ('already_paid' | 'card_on_receipt')[];
  pickup_point_ids?: string[];
  type?: 'pickup_point' | 'terminal' | 'post_office' | 'sorting_center';
}

interface YandexPickupPoint {
  id: string;
  address: {
    apartment?: string;
    building?: string;
    comment?: string;
    country?: string;
    full_address: string;
    geoId?: number;
    house?: string;
    housing?: string;
    locality?: string;
    postal_code?: string;
    region?: string;
    street?: string;
    subRegion?: string;
  };
  contact: {
    phone: string;
    email?: string;
    first_name?: string;
    last_name?: string;
    partonymic?: string;
  };
  name: string;
  payment_methods: ('already_paid' | 'card_on_receipt')[];
  position: {
    latitude: number;
    longitude: number;
  };
  schedule: {
    restrictions: {
      days: number[];
      time_from: {
        hours: number;
        minutes: number;
      };
      time_to: {
        hours: number;
        minutes: number;
      };
    }[];
    time_zone: number;
  };
  type: 'pickup_point' | 'terminal' | 'post_office' | 'sorting_center';
  dayoffs?: {
    date: number;
    date_utc: number;
  }[];
  instruction?: string;
  is_dark_store?: boolean;
  is_market_partner?: boolean;
  is_post_office?: boolean;
  is_yandex_branded?: boolean;
  operator_station_id?: string;
}

interface YandexPickupPointsResponse {
  points: YandexPickupPoint[];
}

const BASE_URL = 'https://b2b-authproxy.taxi.yandex.net/api/b2b/platform';

class YandexDeliveryService {
  private token: string;

  constructor() {
    this.token = process.env.YANDEX_DELIVERY_TOKEN || '';
    if (!this.token) {
      throw new Error('YANDEX_DELIVERY_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
  }

  private async makeRequest<T>(endpoint: string, data?: any): Promise<T> {
    const url = `${BASE_URL}${endpoint}`;
    
    console.log(`üöö –Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å: ${endpoint}`);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', data ? JSON.stringify(data, null, 2) : '–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ API –Ø–Ω–¥–µ–∫—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${response.status} - ${errorText}`);
      throw new Error(`–û—à–∏–±–∫–∞ API –Ø–Ω–¥–µ–∫—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∏:', JSON.stringify(result, null, 2));
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É
   */
  async detectLocation(location: string): Promise<YandexLocationDetectResponse> {
    return this.makeRequest<YandexLocationDetectResponse>('/location/detect', {
      location,
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ —Å–∞–º–æ–ø—Ä–∏–≤–æ–∑–∞ –∏ –ü–í–ó
   */
  async getPickupPoints(request: YandexPickupPointsRequest = {}): Promise<YandexPickupPointsResponse> {
    return this.makeRequest<YandexPickupPointsResponse>('/pickup-points/list', request);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–í–ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   */
  async getPickupPointsByCity(cityName: string): Promise<YandexPickupPoint[]> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º geo_id –≥–æ—Ä–æ–¥–∞
      const locationResponse = await this.detectLocation(cityName);
      
      if (locationResponse.variants.length === 0) {
        return [];
      }

      const geoId = locationResponse.variants[0].geo_id;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ü–í–ó –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const pickupResponse = await this.getPickupPoints({
        geo_id: geoId,
        is_yandex_branded: true, // –¢–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ü–í–ó –Ø–Ω–¥–µ–∫—Å–∞
      });

      return pickupResponse.points;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–í–ó –¥–ª—è –≥–æ—Ä–æ–¥–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–í–ó –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
   */
  async getPickupPointsByCoordinates(
    latitude: number,
    longitude: number,
    radiusKm: number = 10
  ): Promise<YandexPickupPoint[]> {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–¥–∏—É—Å –≤ –≥—Ä–∞–¥—É—Å—ã (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
      const radiusDegrees = radiusKm / 111; // 1 –≥—Ä–∞–¥—É—Å ‚âà 111 –∫–º

      const pickupResponse = await this.getPickupPoints({
        latitude: {
          from: latitude - radiusDegrees,
          to: latitude + radiusDegrees,
        },
        longitude: {
          from: longitude - radiusDegrees,
          to: longitude + radiusDegrees,
        },
        is_yandex_branded: true,
      });

      return pickupResponse.points;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–í–ó –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', error);
      return [];
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ü–í–ó
   */
  formatSchedule(schedule: YandexPickupPoint['schedule']): string {
    if (!schedule.restrictions || schedule.restrictions.length === 0) {
      return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    }

    const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    
    return schedule.restrictions.map(restriction => {
      const days = restriction.days.map(day => dayNames[day - 1]).join(', ');
      const timeFrom = `${restriction.time_from.hours.toString().padStart(2, '0')}:${restriction.time_from.minutes.toString().padStart(2, '0')}`;
      const timeTo = `${restriction.time_to.hours.toString().padStart(2, '0')}:${restriction.time_to.minutes.toString().padStart(2, '0')}`;
      
      return `${days}: ${timeFrom}-${timeTo}`;
    }).join('; ');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ü–í–ó –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
   */
  getTypeLabel(type: string): string {
    const labels = {
      pickup_point: '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
      terminal: '–ü–æ—Å—Ç–æ–º–∞—Ç',
      post_office: '–ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ',
      sorting_center: '–°–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
    };
    return labels[type as keyof typeof labels] || type;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤
   */
  async createOffer(request: CreateOfferRequest): Promise<CreateOfferResponse> {
    return this.makeRequest<CreateOfferResponse>('/offers/create', request);
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
   */
  private parseAddress(address: string): {
    city?: string;
    street?: string;
    house?: string;
    region?: string;
    full_address: string;
  } {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞:', address);
    
    let city = '';
    let street = '';
    let house = '';
    let region = '';

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    const normalizedAddress = address.trim().toLowerCase();
    
    // –ò—â–µ–º –Ω–æ–º–µ—Ä –¥–æ–º–∞ (—Ü–∏—Ñ—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, –∫–æ—Ä–ø—É—Å–æ–º, —Å—Ç—Ä–æ–µ–Ω–∏–µ–º)
    const housePatterns = [
      /\b–¥[\.\s]*(\d+[–∞-—è—ë]?(?:\s*–∫[\.\s]*\d+)?(?:\s*—Å—Ç—Ä[\.\s]*\d+)?)\b/i,
      /\b–¥–æ–º[\.\s]*(\d+[–∞-—è—ë]?(?:\s*–∫[\.\s]*\d+)?(?:\s*—Å—Ç—Ä[\.\s]*\d+)?)\b/i,
      /\b(\d+[–∞-—è—ë]?(?:\s*–∫[\.\s]*\d+)?(?:\s*—Å—Ç—Ä[\.\s]*\d+)?)\s*$/i, // –í –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
      /\b(\d+[–∞-—è—ë]?)\b/i // –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –±—É–∫–≤–æ–π
    ];
    
    for (const pattern of housePatterns) {
      const match = address.match(pattern);
      if (match) {
        house = match[1].trim();
        console.log('üè† –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –¥–æ–º–∞:', house);
        break;
      }
    }

    // –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    const cities = [
      { name: '–ú–æ—Å–∫–≤–∞', patterns: ['–º–æ—Å–∫–≤–∞', 'moscow'] },
      { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', patterns: ['—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '—Å–ø–±', '–ø–∏—Ç–µ—Ä', 'petersburg'] },
      { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', patterns: ['–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'] },
      { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', patterns: ['–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'] },
      { name: '–ö–∞–∑–∞–Ω—å', patterns: ['–∫–∞–∑–∞–Ω—å'] },
      { name: '–ò–≤–∞–Ω–æ–≤–æ', patterns: ['–∏–≤–∞–Ω–æ–≤–æ'] },
      { name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', patterns: ['–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥'] },
    ];
    
    for (const cityInfo of cities) {
      for (const pattern of cityInfo.patterns) {
        if (normalizedAddress.includes(pattern)) {
          city = cityInfo.name;
          console.log('üèôÔ∏è –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥:', city);
          break;
        }
      }
      if (city) break;
    }
    
    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    if (!city) {
      const parts = address.split(/[,\s]+/).filter(part => part.length > 0);
      if (parts.length > 0) {
        city = parts[0];
        console.log('üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', city);
      }
    }

    // –ò—â–µ–º —É–ª–∏—Ü—É - –≤—Å–µ —á—Ç–æ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞
    let streetMatch = address;
    
    // –£–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞—á–∞–ª–∞
    if (city) {
      const cityPattern = new RegExp(`^[^,]*${city.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}[^,]*,?\\s*`, 'i');
      streetMatch = streetMatch.replace(cityPattern, '').trim();
    }
    
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏–∑ –∫–æ–Ω—Ü–∞
    if (house) {
      const housePattern = new RegExp(`\\s*–¥[\\.\\s]*${house.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}.*$`, 'i');
      streetMatch = streetMatch.replace(housePattern, '').trim();
      
      // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –±–µ–∑ "–¥."
      const housePattern2 = new RegExp(`\\s*${house.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}.*$`, 'i');
      streetMatch = streetMatch.replace(housePattern2, '').trim();
    }
    
    // –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–ª–∏—Ü—ã
    street = streetMatch.replace(/^[,\s]+|[,\s]+$/g, ''); // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    console.log('üõ£Ô∏è –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞:', street);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ä–æ–¥–∞
    const regionMap: Record<string, string> = {
      '–º–æ—Å–∫–≤–∞': '–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞',
      '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': '–≥–æ—Ä–æ–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      '–∏–≤–∞–Ω–æ–≤–æ': '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–∫–∞–∑–∞–Ω—å': '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    };

    region = regionMap[city.toLowerCase()] || `${city} –æ–±–ª–∞—Å—Ç—å`;
    console.log('üó∫Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω:', region);

    const result = {
      city: city || undefined,
      street: street || undefined,
      house: house || undefined,
      region: region || undefined,
      full_address: address,
    };
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result);
    return result;
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async improveAddress(address: string): Promise<CustomLocation> {
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const parsedAddress = this.parseAddress(address);
    console.log('üè† –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞:', {
      –∏—Å—Ö–æ–¥–Ω—ã–π: address,
      –≥–æ—Ä–æ–¥: parsedAddress.city,
      —É–ª–∏—Ü–∞: parsedAddress.street,
      –¥–æ–º: parsedAddress.house,
      —Ä–µ–≥–∏–æ–Ω: parsedAddress.region
    });
    
    try {
      const response = await this.detectLocation(address);
      if (response.variants && response.variants.length > 0) {
        const bestVariant = response.variants[0];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–ø–æ–ª–Ω—è—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        const city = parsedAddress.city || bestVariant.address;
        const region = parsedAddress.region || bestVariant.address;
        const street = parsedAddress.street || '—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è';
        const house = parsedAddress.house || '1';
        const fullAddress = `${city}, ${street} ${house}`.trim();
        
        return {
          // –ü–æ–ª—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è API)
          country: 'Russia',
          city: city,
          region: region,
          street: street,
          house: house,
          full_address: fullAddress,
          details: {
            full_address: fullAddress,
            country: 'Russia',
            geoId: bestVariant.geo_id,
            locality: city,
            region: region,
            street: street,
            house: house,
          },
        };
      }
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:', error);
    }

    // Fallback –∫ –ø–∞—Ä—Å–∏–Ω–≥—É –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    let formattedAddress = address;
    if (!formattedAddress.toLowerCase().includes('—Ä–æ—Å—Å–∏—è')) {
      formattedAddress = `${formattedAddress}, –†–æ—Å—Å–∏—è`;
    }

    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    let city = parsedAddress.city;
    let region = parsedAddress.region;
    let street = parsedAddress.street;
    let house = parsedAddress.house;

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É
    if (!city) {
      // –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ –∞–¥—Ä–µ—Å–µ
      const cities = ['–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '—Å–ø–±', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–∫–∞–∑–∞–Ω—å', '–∏–≤–∞–Ω–æ–≤–æ'];
      for (const cityName of cities) {
        if (address.toLowerCase().includes(cityName)) {
          city = cityName.charAt(0).toUpperCase() + cityName.slice(1);
          break;
        }
      }
      if (!city) city = '–ú–æ—Å–∫–≤–∞'; // Fallback
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ä–æ–¥–∞
    if (!region) {
      const regionMap: Record<string, string> = {
        '–º–æ—Å–∫–≤–∞': '–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞',
        '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': '–≥–æ—Ä–æ–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        '—Å–ø–±': '–≥–æ—Ä–æ–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–ø–∏—Ç–µ—Ä': '–≥–æ—Ä–æ–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–∏–≤–∞–Ω–æ–≤–æ': '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–∫–∞–∑–∞–Ω—å': '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      };
      region = regionMap[city.toLowerCase()] || '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å';
    }

    // –ï—Å–ª–∏ —É–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    if (!street) {
      street = '—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è';
    }

    // –ï—Å–ª–∏ –¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    if (!house) {
      house = '1';
    }

    const result = {
      // –ü–æ–ª—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è API)
      country: 'Russia',
      city: city,
      region: region,
      street: street,
      house: house,
      full_address: formattedAddress,
      details: {
        full_address: formattedAddress,
        country: 'Russia',
        locality: city,
        region: region,
        street: street,
        house: house,
      },
    };

    console.log('üèóÔ∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è API:', result);
    return result;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã
   * –ü—Ä–æ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async createOfferFromCart(cartData: {
    items: Array<{
      id: string;
      name: string;
      article: string;
      price: number;
      quantity: number;
      weight?: number;
      dimensions?: { dx?: number; dy?: number; dz?: number };
      deliveryTime?: number; // –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∫ –Ω–∞–º –Ω–∞ —Å–∫–ª–∞–¥
    }>;
    deliveryAddress: string;
    recipientName: string;
    recipientPhone: string;
    paymentMethod: 'already_paid' | 'card_on_receipt';
    deliveryType: 'courier' | 'pickup';
    pickupPointId?: string;
    maxSupplierDeliveryDays?: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  }): Promise<CreateOfferResponse> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
    const operatorRequestId = `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –∫–æ—Ä–æ–±–∫–∏
    const packageBarcode = 'package_001';

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç API
    const items: RequestResourceItem[] = cartData.items.map((item, index) => ({
      article: item.article,
      billing_details: {
        assessed_unit_price: Math.round(item.price * 100), // –í –∫–æ–ø–µ–π–∫–∞—Ö
        unit_price: Math.round(item.price * 100), // –í –∫–æ–ø–µ–π–∫–∞—Ö
        nds: 20, // –ù–î–° 20%
      },
      count: item.quantity,
      name: item.name,
      place_barcode: packageBarcode, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ —á—Ç–æ –∏ —É –∫–æ—Ä–æ–±–∫–∏
      physical_dims: item.dimensions ? {
        dx: item.dimensions.dx || 10,
        dy: item.dimensions.dy || 10,
        dz: item.dimensions.dz || 10,
      } : {
        predefined_volume: 1000, // 1000 —Å–º¬≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      },
    }));

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑–æ–º–µ—Å—Ç–∞ (–∫–æ—Ä–æ–±–∫–∏)
    const places: ResourcePlace[] = [{
      barcode: packageBarcode,
      physical_dims: {
        dx: 30, // 30 —Å–º
        dy: 20, // 20 —Å–º
        dz: 15, // 15 —Å–º
        weight_gross: cartData.items.reduce((total, item) => 
          total + (item.weight || 500) * item.quantity, 0
        ), // –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
      },
      description: '–ü–æ—Å—ã–ª–∫–∞ —Å –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç—è–º–∏',
    }];

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞—à —Å–∫–ª–∞–¥)
    const source: SourceRequestNode = {
      platform_station: {
        platform_id: process.env.YANDEX_DELIVERY_SOURCE_STATION_ID || 'default_warehouse',
      },
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    let destination: DestinationRequestNode;
    
    if (cartData.deliveryType === 'pickup' && cartData.pickupPointId) {
      // –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ü–í–ó
      destination = {
        type: 'platform_station',
        platform_station: {
          platform_id: cartData.pickupPointId,
        },
      };
          } else {
        // –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
        // –£–ª—É—á—à–∞–µ–º –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        const improvedLocation = await this.improveAddress(cartData.deliveryAddress);
        
        console.log('üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:', JSON.stringify(improvedLocation, null, 2));
        
        destination = {
          type: 'custom_location',
          custom_location: improvedLocation,
          // –î—É–±–ª–∏—Ä—É–µ–º –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ destination (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –∏—Ö –æ–∂–∏–¥–∞–µ—Ç —Ç—É—Ç)
          country: improvedLocation.country,
          city: improvedLocation.city,
          region: improvedLocation.region,
          house: improvedLocation.house,
          street: improvedLocation.street,
          full_address: improvedLocation.full_address,
          // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏: –æ—Ç –∑–∞–≤—Ç—Ä–∞ –¥–æ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, –≤–µ—Å—å –¥–µ–Ω—å
          interval: {
            from: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // –ó–∞–≤—Ç—Ä–∞ 00:00
            to: Math.floor(Date.now() / 1000) + 72 * 60 * 60, // –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 00:00 (48 —á–∞—Å–æ–≤)
          },
        };
      }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    const nameParts = cartData.recipientName.split(' ');
    const recipientInfo: Contact = {
      first_name: nameParts[0] || '–ö–ª–∏–µ–Ω—Ç',
      last_name: nameParts[1] || '',
      phone: cartData.recipientPhone,
    };

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    const request: CreateOfferRequest = {
      billing_info: {
        payment_method: cartData.paymentMethod,
      },
      destination,
      info: {
        operator_request_id: operatorRequestId,
        comment: '–ó–∞–∫–∞–∑ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π',
      },
      items,
      last_mile_policy: cartData.deliveryType === 'pickup' ? 'self_pickup' : 'time_interval',
      places,
      recipient_info: recipientInfo,
      source,
      particular_items_refuse: false, // –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–∫—É–ø –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
    };

    // –ù–ï —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ API –Ø–Ω–¥–µ–∫—Å–∞ - —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞ —Å–∞–º—É –¥–æ—Å—Ç–∞–≤–∫—É
    // –í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ –≤ —Ä–µ–∑–æ–ª–≤–µ—Ä–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–π –¥–∞—Ç—ã
    console.log(`‚ÑπÔ∏è –í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (${cartData.maxSupplierDeliveryDays || 0} –¥–Ω–µ–π) –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–π –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏`);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è —Å–∞–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    const timeIntervals = [
      // 1. –ó–∞–≤—Ç—Ä–∞-–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)
      {
        from: Math.floor(Date.now() / 1000) + 24 * 60 * 60,
        to: Math.floor(Date.now() / 1000) + 72 * 60 * 60,
      },
      // 2. –ß–µ—Ä–µ–∑ 2-3 –¥–Ω—è (–µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
      {
        from: Math.floor(Date.now() / 1000) + 48 * 60 * 60,
        to: Math.floor(Date.now() / 1000) + 96 * 60 * 60,
      },
      // 3. –ß–µ—Ä–µ–∑ 3-5 –¥–Ω–µ–π (–µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
      {
        from: Math.floor(Date.now() / 1000) + 72 * 60 * 60,
        to: Math.floor(Date.now() / 1000) + 120 * 60 * 60,
      },
    ];

    let lastError: Error | null = null;

    // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π
    for (let i = 0; i < timeIntervals.length; i++) {
      const interval = timeIntervals[i];
      try {
        if (cartData.deliveryType === 'courier') {
          request.destination.interval = interval;
        }
        
        console.log(`üöö –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${timeIntervals.length} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º:`, {
          –æ—Ç: new Date(interval.from * 1000).toLocaleString('ru-RU'),
          –¥–æ: new Date(interval.to * 1000).toLocaleString('ru-RU'),
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥
        if (i === 0) {
          console.log('üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å API:', JSON.stringify(request, null, 2));
        }
        
        const response = await this.createOffer(request);
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ñ—Ñ–µ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (response.offers && response.offers.length > 0) {
          console.log(`‚úÖ –ü–æ–ª—É—á–∏–ª–∏ ${response.offers.length} –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${i + 1}`);
          return response;
        } else {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ ${i + 1}`);
        }
      } catch (error) {
        console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval.from}-${interval.to} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error instanceof Error ? error.message : error);
        lastError = error instanceof Error ? error : new Error(String(error));
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ "no_delivery_options", –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        if (error instanceof Error && !error.message.includes('no_delivery_options')) {
          throw error;
        }
      }
    }

    // –ï—Å–ª–∏ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ü–í–ó
    if (cartData.deliveryType === 'courier' && lastError?.message.includes('no_delivery_options')) {
      console.log('üí° –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ü–í–ó...');
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ü–í–ó
        const locationResponse = await this.detectLocation(cartData.deliveryAddress);
        if (locationResponse.variants && locationResponse.variants.length > 0) {
          const geoId = locationResponse.variants[0].geo_id;
          console.log(`üìç –ù–∞–π–¥–µ–Ω geoId: ${geoId} –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${cartData.deliveryAddress}`);
          
          // –ò—â–µ–º –ü–í–ó –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
          const pickupPoints = await this.getPickupPoints({ geo_id: geoId });
          if (pickupPoints.points && pickupPoints.points.length > 0) {
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${pickupPoints.points.length} –ü–í–ó –≤ –≥–æ—Ä–æ–¥–µ`);
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –¥–ª—è –ü–í–ó (—Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
            const pickupOffers: Offer[] = pickupPoints.points.slice(0, 3).map((point, index) => ({
              offer_id: `pickup_${point.id}`,
              expires_at: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å—É—Ç–∫–∏
              offer_details: {
                delivery_interval: {
                  min: Math.floor(Date.now() / 1000) + 24 * 60 * 60,
                  max: Math.floor(Date.now() / 1000) + 72 * 60 * 60,
                  policy: 'self_pickup' as const,
                },
                pricing: '300.00 RUB', // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                pricing_total: '300.00 RUB',
              },
            }));
            
            return { offers: pickupOffers };
          }
        }
      } catch (pickupError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ü–í–ó:', pickupError);
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    if (lastError) {
      throw lastError;
    }

    // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return { offers: [] };
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
interface BillingInfo {
  payment_method: 'already_paid' | 'card_on_receipt';
  delivery_cost?: number;
}

interface CustomLocation {
  details?: LocationDetails;
  latitude?: number;
  longitude?: number;
  // –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∏ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  country?: string;
  city?: string;
  region?: string;
  house?: string;
  street?: string;
  full_address?: string;
}

interface LocationDetails {
  apartment?: string;
  building?: string;
  comment?: string;
  country?: string;
  full_address: string;
  geoId?: number;
  house?: string;
  housing?: string;
  locality?: string;
  postal_code?: string;
  region?: string;
  street?: string;
  subRegion?: string;
}

interface PlatformStation {
  platform_id?: string;
}

interface TimeInterval {
  from: number;
  to: number;
}

interface DestinationRequestNode {
  type: 'platform_station' | 'custom_location';
  custom_location?: CustomLocation;
  interval?: TimeInterval;
  platform_station?: PlatformStation;
  // –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ destination
  country?: string;
  city?: string;
  region?: string;
  house?: string;
  street?: string;
  full_address?: string;
}

interface SourceRequestNode {
  platform_station: PlatformStation;
  interval?: TimeInterval;
}

interface RequestInfo {
  operator_request_id: string;
  comment?: string;
}

interface ItemBillingDetails {
  assessed_unit_price: number;
  unit_price: number;
  inn?: string;
  nds?: number;
}

interface ItemPhysicalDimensions {
  dx?: number;
  dy?: number;
  dz?: number;
  predefined_volume?: number;
}

interface RequestResourceItem {
  article: string;
  billing_details: ItemBillingDetails;
  count: number;
  name: string;
  place_barcode: string;
  marking_code?: string;
  physical_dims?: ItemPhysicalDimensions;
  uin?: string;
}

interface PlacePhysicalDimensions {
  dx: number;
  dy: number;
  dz: number;
  weight_gross: number;
  predefined_volume?: number;
}

interface ResourcePlace {
  barcode: string;
  physical_dims: PlacePhysicalDimensions;
  description?: string;
}

interface Contact {
  first_name: string;
  phone: string;
  email?: string;
  last_name?: string;
  partonymic?: string;
}

interface CreateOfferRequest {
  billing_info: BillingInfo;
  destination: DestinationRequestNode;
  info: RequestInfo;
  items: RequestResourceItem[];
  last_mile_policy: 'time_interval' | 'self_pickup';
  places: ResourcePlace[];
  recipient_info: Contact;
  source: SourceRequestNode;
  particular_items_refuse?: boolean;
}

interface DeliveryInterval {
  max: number;
  min: number;
  policy: 'time_interval' | 'self_pickup';
}

interface PickupInterval {
  max: number;
  min: number;
}

interface OfferDetails {
  delivery_interval?: DeliveryInterval;
  pickup_interval?: PickupInterval;
  pricing?: string;
  pricing_commission_on_delivery_payment?: string;
  pricing_commission_on_delivery_payment_amount?: string;
  pricing_total?: string;
}

interface Offer {
  expires_at?: string | number;
  offer_details?: OfferDetails;
  offer_id?: string;
}

interface CreateOfferResponse {
  offers: Offer[];
}

export const yandexDeliveryService = new YandexDeliveryService();
export type { YandexPickupPoint, CreateOfferRequest, CreateOfferResponse, Offer };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
export const getAddressSuggestions = async (query: string): Promise<string[]> => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
  const apiKey = process.env.YANDEX_MAPS_API_KEY;
  
  if (!apiKey) {
    console.error('YANDEX_MAPS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return [];
  }

  if (!query || query.length < 3) {
    return [];
  }

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex Geocoder API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
    const response = await fetch(
      `https://geocode-maps.yandex.ru/1.x/?apikey=${apiKey}&geocode=${encodeURIComponent(query)}&format=json&results=5&kind=house&lang=ru_RU`
    );

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ API –ì–µ–æ–∫–æ–¥–µ—Ä–∞:', response.status, response.statusText);
      return [];
    }

    const data = await response.json();
    
    if (data?.response?.GeoObjectCollection?.featureMember) {
      const features = data.response.GeoObjectCollection.featureMember;
      
      return features.map((feature: any) => {
        const geoObject = feature.GeoObject;
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
        return geoObject.metaDataProperty?.GeocoderMetaData?.text || geoObject.name || '';
      }).filter(Boolean);
    }

    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤:', error);
    return [];
  }
}; 