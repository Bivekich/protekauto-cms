import axios from 'axios';
import { translateCategoryName } from './translation-service';

export interface CategoryNode {
  id: string;
  name: string;
  level: number;
  parentId: string | null;
  children: CategoryNode[];
}

export interface PartsAPIArticle {
  SUP_BRAND: string | null;
  SUP_ID: number | null;
  PRODUCT_GROUP: string | null;
  PT_ID: number | null;
  ART_SUP_BRAND: string | null;
  ART_ARTICLE_NR: string | null;
  ART_ID: string | null;
}

export interface PartsAPIMedia {
  ART_MEDIA_TYPE: number | string;  // –ú–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π —Ç–∏–ø–∞ "JPEG"
  ART_MEDIA_SOURCE: string;         // –ü–æ–ª–Ω—ã–π URL –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  ART_MEDIA_SUP_ID: number;         // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∑–∞–ø—á–∞—Å—Ç–∏
  ART_MEDIA_KIND?: string;          // –í–∏–¥ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
}

export interface PartsAPIResponse {
  [key: string]: any;
}

class PartsAPIService {
  private baseURL: string;
  private categoriesApiKey: string;
  private articlesApiKey: string;
  private mediaApiKey: string;

  constructor() {
    this.baseURL = 'https://api.partsapi.ru';
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.categoriesApiKey = process.env.PARTSAPI_CATEGORIES_KEY || '';
    this.articlesApiKey = process.env.PARTSAPI_ARTICLES_KEY || '';
    this.mediaApiKey = process.env.PARTSAPI_MEDIA_KEY || '';

    if (!this.categoriesApiKey || !this.articlesApiKey || !this.mediaApiKey) {
      console.error('‚ùå PartsAPI –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
  }

  async getSearchTree(carId: number = 9877, carType: 'PC' | 'CV' | 'Motorcycle' = 'PC', lang: number = 16): Promise<CategoryNode[]> {
    try {
      console.log('üîç PartsAPI –∑–∞–ø—Ä–æ—Å –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', { carId, carType, lang });
      
      const response = await axios.get(this.baseURL, {
        params: {
          method: 'getSearchTree',
          key: this.categoriesApiKey,
          lang,
          carId,
          carType
        },
        timeout: 10000
      });

      console.log('‚úÖ PartsAPI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', response.data?.length || 0);

      if (!response.data || !Array.isArray(response.data)) {
        console.warn('‚ö†Ô∏è PartsAPI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return [];
      }

      return this.transformToCategoryTree(response.data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsAPI getSearchTree:', error);
      return [];
    }
  }

  async getArticles(strId: number, carId: number = 9877, carType: 'PC' | 'CV' | 'Motorcycle' = 'PC', lang: number = 16): Promise<PartsAPIArticle[]> {
    try {
      console.log('üîç PartsAPI –∑–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–æ–≤:', { strId, carId, carType, lang });
      
      const response = await axios.get(this.baseURL, {
        params: {
          method: 'getArticles',
          key: this.articlesApiKey,
          lang,
          strId,
          carId,
          carType
        },
        timeout: 15000
      });

      console.log('‚úÖ PartsAPI –∞—Ä—Ç–∏–∫—É–ª—ã –ø–æ–ª—É—á–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', response.data?.length || 0);

      if (!response.data || !Array.isArray(response.data)) {
        console.warn('‚ö†Ô∏è PartsAPI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤');
        return [];
      }

      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsAPI getArticles:', error);
      return [];
    }
  }

  async getArticleMedia(artId: string, lang: number = 16): Promise<PartsAPIMedia[]> {
    try {
      console.log('üñºÔ∏è PartsAPI –∑–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞:', { artId, lang });
      
      const response = await axios.get(this.baseURL, {
        params: {
          method: 'getArticleMedia',
          key: this.mediaApiKey,
          ART_ID: artId,
          LANG: lang
        },
        timeout: 10000
      });

      console.log('‚úÖ PartsAPI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', response.data?.length || 0);

      if (!response.data || !Array.isArray(response.data)) {
        console.warn('‚ö†Ô∏è PartsAPI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        return [];
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–∏–ø—ã 1, 3, 5, 6, 7 - —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–∏–ø—ã)
      const images = response.data.filter((media: PartsAPIMedia) => {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã–µ, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–∏–ø—ã
        const mediaType = media.ART_MEDIA_TYPE;
        return [1, 3, 5, 6, 7].includes(Number(mediaType)) || 
               ['JPEG', 'JPG', 'PNG', 'WebP', 'BMP', 'GIF'].includes(String(mediaType));
      });

      console.log('üñºÔ∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', images.length);
      return images;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsAPI getArticleMedia:', error);
      return [];
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getImageUrl(mediaSource: string): string {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (mediaSource.startsWith('http')) {
      return mediaSource;
    }
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    return `https://images.partsapi.ru/${mediaSource}`;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ (–¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞)
  async getArticleMainImage(artId: string): Promise<string | null> {
    try {
      const media = await this.getArticleMedia(artId);
      if (media.length > 0) {
        return this.getImageUrl(media[0].ART_MEDIA_SOURCE);
      }
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  private transformToCategoryTree(flatData: PartsAPIResponse[]): CategoryNode[] {
    console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–ª–æ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    const nodeMap = new Map<string, CategoryNode>();
    const rootNodes: CategoryNode[] = [];

    // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    flatData.forEach((item) => {
             const translatedName = translateCategoryName(item.STR_NODE_NAME);
      
      const node: CategoryNode = {
        id: item.STR_ID,
        name: translatedName,
        level: parseInt(item.STR_LEVEL) || 0,
        parentId: item.STR_ID_PARENT || null,
        children: []
      };
      
      nodeMap.set(node.id, node);
    });

    // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    nodeMap.forEach((node) => {
      if (node.parentId && nodeMap.has(node.parentId)) {
        const parent = nodeMap.get(node.parentId)!;
        parent.children.push(node);
      } else {
        rootNodes.push(node);
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
    const sortNodes = (nodes: CategoryNode[]) => {
      nodes.sort((a, b) => {
        if (a.level !== b.level) {
          return a.level - b.level;
        }
        return a.name.localeCompare(b.name, 'ru');
      });
      
      nodes.forEach(node => {
        if (node.children.length > 0) {
          sortNodes(node.children);
        }
      });
    };

    sortNodes(rootNodes);

    console.log('‚úÖ –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ, –∫–æ—Ä–Ω–µ–≤—ã—Ö —É–∑–ª–æ–≤:', rootNodes.length);
    return rootNodes;
  }

  getFlatCategories(tree: CategoryNode[]): CategoryNode[] {
    const flatCategories: CategoryNode[] = [];
    
    const traverse = (nodes: CategoryNode[]) => {
      nodes.forEach(node => {
        flatCategories.push(node);
        if (node.children.length > 0) {
          traverse(node.children);
        }
      });
    };
    
    traverse(tree);
    return flatCategories;
  }

  getTopLevelCategories(tree: CategoryNode[]): CategoryNode[] {
    const result: CategoryNode[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result.push(...tree);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    tree.forEach(rootCategory => {
      result.push(...rootCategory.children);
    });
    
    return result;
  }

  getRootCategories(tree: CategoryNode[]): CategoryNode[] {
    return tree; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  }
}

export const partsAPIService = new PartsAPIService(); 