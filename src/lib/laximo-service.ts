import { createHash } from 'crypto'

export interface LaximoBrand {
  brand: string
  code: string
  icon: string
  name: string
  supportdetailapplicability: boolean
  supportparameteridentification2: boolean
  supportquickgroups: boolean
  supportvinsearch: boolean
  supportframesearch?: boolean
  vinexample?: string
  frameexample?: string
  features: LaximoFeature[]
  extensions?: LaximoExtensions
}

export interface LaximoFeature {
  name: string
  example?: string
}

export interface LaximoExtensions {
  operations?: LaximoOperation[]
}

export interface LaximoOperation {
  description: string
  kind: string
  name: string
  fields: LaximoField[]
}

export interface LaximoField {
  description: string
  example?: string
  name: string
  pattern?: string
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
export interface LaximoCatalogInfo {
  brand: string
  code: string
  icon: string
  name: string
  supportdetailapplicability: boolean
  supportparameteridentification2: boolean
  supportquickgroups: boolean
  supportvinsearch: boolean
  supportplateidentification?: boolean
  vinexample?: string
  plateexample?: string
  features: LaximoFeature[]
  permissions: string[]
}

export interface LaximoWizardStep {
  allowlistvehicles: boolean
  automatic: boolean
  conditionid: string
  determined: boolean
  name: string
  type: string
  ssd?: string
  value?: string
  valueid?: string
  options: LaximoWizardOption[]
}

export interface LaximoWizardOption {
  key: string
  value: string
}

export interface LaximoVehicleSearchResult {
  vehicleid: string
  name?: string
  brand: string
  catalog?: string
  model: string
  modification: string
  year: string
  bodytype: string
  engine: string
  notes?: string
  ssd?: string
}

export interface LaximoVehicleInfo {
  vehicleid: string
  name: string
  ssd: string
  brand: string
  catalog: string
  attributes: LaximoVehicleAttribute[]
}

export interface LaximoVehicleAttribute {
  key: string
  name: string
  value: string
}

export interface LaximoQuickGroup {
  quickgroupid: string
  name: string
  link: boolean
  children?: LaximoQuickGroup[]
}

export interface LaximoQuickDetail {
  quickgroupid: string
  name: string
  units?: LaximoUnit[]
}

export interface LaximoUnit {
  unitid: string
  name: string
  code?: string
  description?: string
  imageurl?: string
  largeimageurl?: string
  details?: LaximoDetail[]
  attributes?: LaximoDetailAttribute[]
}

export interface LaximoDetail {
  detailid: string
  name: string
  oem: string
  brand?: string
  description?: string
  applicablemodels?: string
  note?: string
  attributes?: LaximoDetailAttribute[]
}

export interface LaximoDetailAttribute {
  key: string
  name?: string
  value: string
}

export interface LaximoOEMResult {
  oemNumber: string
  categories: LaximoOEMCategory[]
}

export interface LaximoOEMCategory {
  categoryid: string
  name: string
  units: LaximoOEMUnit[]
}

export interface LaximoOEMUnit {
  unitid: string
  name: string
  code?: string
  imageurl?: string
  details: LaximoOEMDetail[]
}

export interface LaximoOEMDetail {
  detailid: string
  name: string
  oem: string
  brand?: string
  amount?: string
  range?: string
  attributes?: LaximoDetailAttribute[]
}

export interface LaximoFulltextSearchResult {
  searchQuery: string
  details: LaximoFulltextDetail[]
}

export interface LaximoFulltextDetail {
  oem: string
  name: string
  brand?: string
  description?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–æ–¥—É–ª—è Doc
export interface LaximoDocFindOEMResult {
  details: LaximoDocDetail[]
}

export interface LaximoDocDetail {
  detailid: string
  formattedoem: string
  manufacturer: string
  manufacturerid: string
  name: string
  oem: string
  volume?: string
  weight?: string
  replacements: LaximoDocReplacement[]
}

export interface LaximoDocReplacement {
  type: string
  way: string
  replacementid: string
  rate?: string
  detail: LaximoDocReplacementDetail
}

export interface LaximoDocReplacementDetail {
  detailid: string
  formattedoem: string
  manufacturer: string
  manufacturerid: string
  name: string
  oem: string
  weight?: string
  icon?: string
}

export interface LaximoCatalogVehicleResult {
  catalogCode: string
  catalogName: string
  brand: string
  vehicles: LaximoVehicleSearchResult[]
  vehicleCount: number
}

export interface LaximoVehiclesByPartResult {
  partNumber: string
  catalogs: LaximoCatalogVehicleResult[]
  totalVehicles: number
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —É–∑–ª–æ–≤
export interface LaximoUnitImageMap {
  unitid: string
  imageurl?: string
  largeimageurl?: string
  coordinates: LaximoImageCoordinate[]
}

export interface LaximoImageCoordinate {
  detailid: string
  codeonimage?: string
  x: number
  y: number
  width: number
  height: number
  shape: string
}

/**
 * Laximo Doc Service –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è Doc
 */
class LaximoDocService {
  // Endpoints –¥–ª—è Aftermarket (Doc) –º–æ–¥—É–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ WSDL
  private soap11Url = 'https://aws.laximo.ru/ec.Kito.Aftermarket/services/Catalog.CatalogHttpSoap11Endpoint/'
  private soap12Url = 'https://aws.laximo.ru/ec.Kito.Aftermarket/services/Catalog.CatalogHttpSoap12Endpoint/'
  private login = process.env.LAXIMO_DOC_LOGIN || ''
  private password = process.env.LAXIMO_DOC_PASSWORD || ''

  constructor() {
    console.log('üîß LaximoDocService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:')
    console.log('üìß Login:', this.login ? `${this.login.substring(0, 3)}***` : '–ù–ï –ó–ê–î–ê–ù')
    console.log('üîë Password:', this.password ? `${this.password.substring(0, 3)}***` : '–ù–ï –ó–ê–î–ê–ù')
    console.log('üåê SOAP11 URL:', this.soap11Url)
    
    if (!this.login || !this.password) {
      console.error('‚ùå –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Doc –º–æ–¥—É–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HMAC –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private createHMAC(command: string): string {
    if (!this.password) {
      throw new Error('Doc password is required for HMAC generation')
    }
    
    const combinedString = command + this.password
    return createHash('md5').update(combinedString).digest('hex')
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç SOAP 1.1 –∫–æ–Ω–≤–µ—Ä—Ç
   */
  private createSOAP11Envelope(command: string, login: string, hmac: string): string {
    return `<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:ns="http://Aftermarket.Kito.ec">
  <soap:Body>
    <ns:QueryDataLogin>
      <ns:request>${command}</ns:request>
      <ns:login>${login}</ns:login>
      <ns:hmac>${hmac}</ns:hmac>
    </ns:QueryDataLogin>
  </soap:Body>
</soap:Envelope>`
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç SOAP –∑–∞–ø—Ä–æ—Å
   */
  private async makeSOAPRequest(url: string, soapEnvelope: string, soapAction: string): Promise<string> {
    try {
      console.log('üåê Doc SOAP Request URL:', url)
      console.log('üìã Doc SOAP Action:', soapAction)
      console.log('üìÑ Doc SOAP Envelope (first 500 chars):', soapEnvelope.substring(0, 500))
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'text/xml; charset=utf-8',
          'SOAPAction': soapAction
        },
        body: soapEnvelope
      })

      console.log('üì° Doc Response Status:', response.status)
      console.log('üì° Doc Response Headers:', Object.fromEntries(response.headers.entries()))

      if (!response.ok) {
        const errorText = await response.text()
        console.log('‚ùå Doc Error Response Body:', errorText)
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const responseText = await response.text()
      console.log('‚úÖ Doc Response received, length:', responseText.length)
      console.log('üìÑ Doc Response (first 1000 chars):', responseText.substring(0, 1000))
      
      return responseText
    } catch (error) {
      console.error('SOAP request failed:', error)
      throw error
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —á–µ—Ä–µ–∑ Doc: findOem
   */
  async findOEM(oemNumber: string, brand?: string, replacementTypes?: string): Promise<LaximoDocFindOEMResult | null> {
    try {
      console.log('üîç Doc: findOem –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', oemNumber)
      
      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Doc –º–æ–¥—É–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      let command = `FindOEM:Locale=ru_RU|OEM=${oemNumber}|Options=crosses`
      
      if (brand) {
        command += `|Brand=${brand}`
      }
      
      if (replacementTypes) {
        command += `|ReplacementTypes=${replacementTypes}`
      }
      
      const hmac = this.createHMAC(command)
      
      console.log('üìù Doc findOem Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseFindOEMResponse(xmlText)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ Doc findOem:', error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç findOem
   */
  private parseFindOEMResponse(xmlText: string): LaximoDocFindOEMResult | null {
    try {
      console.log('üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Doc findOem...')
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SOAP –æ—Ç–≤–µ—Ç–∞
      const resultMatch = xmlText.match(/<ns:return[^>]*>([\s\S]*?)<\/ns:return>/) || 
                         xmlText.match(/<return[^>]*>([\s\S]*?)<\/return>/)
      if (!resultMatch) {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω return –≤ –æ—Ç–≤–µ—Ç–µ')
        return null
      }

      let resultData = resultMatch[1]
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
      resultData = resultData
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&amp;/g, '&')

      console.log('üìã –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):', resultData.substring(0, 1000))
      console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', resultData)

      // –ò—â–µ–º –±–ª–æ–∫ FindOEM
      const findOemMatch = resultData.match(/<FindOEM>([\s\S]*?)<\/FindOEM>/) ||
                          resultData.match(/<findOem>([\s\S]*?)<\/findOem>/) ||
                          resultData.match(/<response>([\s\S]*?)<\/response>/)
      if (!findOemMatch) {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ FindOEM –≤ –æ—Ç–≤–µ—Ç–µ')
        return null
      }

      const findOemData = findOemMatch[1]
      
      // –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏
      const details: LaximoDocDetail[] = []
      const detailPattern = /<detail([^>]*)>(.*?)<\/detail>/g
      let detailMatch
      
      while ((detailMatch = detailPattern.exec(findOemData)) !== null) {
        const detailAttrs = detailMatch[1]
        const detailContent = detailMatch[2]
        
        const getAttribute = (name: string): string => {
          const match = detailAttrs.match(new RegExp(`${name}="([^"]*)"`, 'i'))
          return match ? match[1] : ''
        }
        
        // –ü–∞—Ä—Å–∏–º –∑–∞–º–µ–Ω—ã
        const replacements: LaximoDocReplacement[] = []
        const replacementPattern = /<replacement([^>]*)>(.*?)<\/replacement>/g
        let replMatch
        
        while ((replMatch = replacementPattern.exec(detailContent)) !== null) {
          const replAttrs = replMatch[1]
          const replContent = replMatch[2]
          
          const getReplAttr = (name: string): string => {
            const match = replAttrs.match(new RegExp(`${name}="([^"]*)"`, 'i'))
            return match ? match[1] : ''
          }
          
          // –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å –∑–∞–º–µ–Ω—ã
          const replDetailMatch = replContent.match(/<detail([^>]*)/)
          let replDetail: LaximoDocReplacementDetail = {
            detailid: '',
            formattedoem: '',
            manufacturer: '',
            manufacturerid: '',
            name: '',
            oem: ''
          }
          
          if (replDetailMatch) {
            const replDetailAttrs = replDetailMatch[1]
            const getReplDetailAttr = (name: string): string => {
              const match = replDetailAttrs.match(new RegExp(`${name}="([^"]*)"`, 'i'))
              return match ? match[1] : ''
            }
            
            replDetail = {
              detailid: getReplDetailAttr('detailid'),
              formattedoem: getReplDetailAttr('formattedoem'),
              manufacturer: getReplDetailAttr('manufacturer'),
              manufacturerid: getReplDetailAttr('manufacturerid'),
              name: getReplDetailAttr('name'),
              oem: getReplDetailAttr('oem'),
              weight: getReplDetailAttr('weight'),
              icon: getReplDetailAttr('icon')
            }
          }
          
          replacements.push({
            type: getReplAttr('type'),
            way: getReplAttr('way'),
            replacementid: getReplAttr('replacementid'),
            rate: getReplAttr('rate'),
            detail: replDetail
          })
        }
        
        const detail: LaximoDocDetail = {
          detailid: getAttribute('detailid'),
          formattedoem: getAttribute('formattedoem'),
          manufacturer: getAttribute('manufacturer'),
          manufacturerid: getAttribute('manufacturerid'),
          name: getAttribute('name'),
          oem: getAttribute('oem'),
          volume: getAttribute('volume'),
          weight: getAttribute('weight'),
          replacements
        }
        
        details.push(detail)
        console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å:', { 
          oem: detail.oem, 
          name: detail.name, 
          manufacturer: detail.manufacturer,
          replacements: detail.replacements.length
        })
      }
      
      console.log('‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π:', details.length)
      
      return {
        details
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ findOem –æ—Ç–≤–µ—Ç–∞:', error)
      return null
    }
  }
}

/**
 * Laximo SOAP API Service –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ endpoints —Å–æ–≥–ª–∞—Å–Ω–æ WSDL:
 * - SOAP 1.1: https://ws.laximo.ru/ec.Kito.WebCatalog/services/Catalog.CatalogHttpSoap11Endpoint/
 * - SOAP 1.2: https://ws.laximo.ru/ec.Kito.WebCatalog/services/Catalog.CatalogHttpSoap12Endpoint/
 * - –§—É–Ω–∫—Ü–∏—è QueryDataLogin –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * - HMAC –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∫–æ–¥ —Å MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * - –ö–æ–º–∞–Ω–¥–∞ ListCatalogs:Locale=ru_RU –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
 */
class LaximoService {
  // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ endpoints —Å–æ–≥–ª–∞—Å–Ω–æ WSDL —Å—Ö–µ–º–µ
  protected soap11Url = 'https://ws.laximo.ru/ec.Kito.WebCatalog/services/Catalog.CatalogHttpSoap11Endpoint/'
  protected soap12Url = 'https://ws.laximo.ru/ec.Kito.WebCatalog/services/Catalog.CatalogHttpSoap12Endpoint/'
  protected login = process.env.LAXIMO_LOGIN || ''
  protected password = process.env.LAXIMO_PASSWORD || ''

  /**
   * –°–æ–∑–¥–∞–µ—Ç HMAC –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * –§–æ—Ä–º—É–ª–∞: MD5(–∫–æ–º–∞–Ω–¥–∞ + –ø–∞—Ä–æ–ª—å)
   */
  protected createHMAC(command: string): string {
    if (!this.password) {
      throw new Error('Password is required for HMAC generation')
    }
    
    const combinedString = command + this.password
    return createHash('md5').update(combinedString).digest('hex')
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç SOAP 1.1 –∫–æ–Ω–≤–µ—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ WSDL —Å—Ö–µ–º–µ
   */
  protected createSOAP11Envelope(command: string, login: string, hmac: string): string {
    return `<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:ns="http://WebCatalog.Kito.ec">
  <soap:Body>
    <ns:QueryDataLogin>
      <ns:request>${command}</ns:request>
      <ns:login>${login}</ns:login>
      <ns:hmac>${hmac}</ns:hmac>
    </ns:QueryDataLogin>
  </soap:Body>
</soap:Envelope>`
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç SOAP 1.2 –∫–æ–Ω–≤–µ—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ WSDL —Å—Ö–µ–º–µ
   */
  private createSOAP12Envelope(command: string, login: string, hmac: string): string {
    return `<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" 
               xmlns:ns="http://WebCatalog.Kito.ec">
  <soap:Body>
    <ns:QueryDataLogin>
      <ns:request>${command}</ns:request>
      <ns:login>${login}</ns:login>
      <ns:hmac>${hmac}</ns:hmac>
    </ns:QueryDataLogin>
  </soap:Body>
</soap:Envelope>`
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
   */
  private parseListCatalogsResponse(xmlText: string): LaximoBrand[] {
    const brands: LaximoBrand[] = []
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ QueryDataLoginResponse/return –∏–ª–∏ response
    let resultData = ''
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞
    const soapResultMatch = xmlText.match(/<ns:return[^>]*>([\s\S]*?)<\/ns:return>/) || 
                           xmlText.match(/<return[^>]*>([\s\S]*?)<\/return>/)
    const responseMatch = xmlText.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (soapResultMatch) {
      resultData = soapResultMatch[1]
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
      resultData = resultData
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&amp;/g, '&')
    } else if (responseMatch) {
      resultData = responseMatch[1]
    } else {
      console.log('üîç –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ XML –æ—Ç–≤–µ—Ç–µ')
      return brands
    }
    
    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListCatalogs
    const catalogsMatch = resultData.match(/<ListCatalogs[^>]*>([\s\S]*?)<\/ListCatalogs>/)
    if (!catalogsMatch) {
      console.log('üîç –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListCatalogs')
      return brands
    }

    const catalogsData = catalogsMatch[1]
    
    // –ò—â–µ–º –≤—Å–µ row —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    const rowMatches = catalogsData.match(/<row[^>]*>[\s\S]*?<\/row>/g)
    
    if (!rowMatches) {
      console.log('üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã row —ç–ª–µ–º–µ–Ω—Ç—ã')
      return brands
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${rowMatches.length} –±—Ä–µ–Ω–¥–æ–≤`)

    for (const rowMatch of rowMatches) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Ç–µ–≥–∞ row
      const rowTagMatch = rowMatch.match(/<row([^>]*)>/);
      if (!rowTagMatch) continue;
      
      const rowAttributes = rowTagMatch[1];
      
      const getAttribute = (name: string): string => {
        const match = rowAttributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
        return match ? match[1] : ''
      }

      const brand: LaximoBrand = {
        brand: getAttribute('brand'),
        code: getAttribute('code'),
        icon: getAttribute('icon'),
        name: getAttribute('name'),
        supportdetailapplicability: getAttribute('supportdetailapplicability') === 'true',
        supportparameteridentification2: getAttribute('supportparameteridentification2') === 'true',
        supportquickgroups: getAttribute('supportquickgroups') === 'true',
        supportvinsearch: getAttribute('supportvinsearch') === 'true',
        features: []
      }

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
      const supportframesearch = getAttribute('supportframesearch')
      if (supportframesearch) {
        brand.supportframesearch = supportframesearch === 'true'
      }
      
      const vinexample = getAttribute('vinexample')
      if (vinexample) {
        brand.vinexample = vinexample
      }
      
      const frameexample = getAttribute('frameexample')
      if (frameexample) {
        brand.frameexample = frameexample
      }

      // –ü–∞—Ä—Å–∏–º features —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      brand.features = this.parseFeatures(rowMatch)
      
      // –ü–∞—Ä—Å–∏–º extensions –µ—Å–ª–∏ –µ—Å—Ç—å
      brand.extensions = this.parseExtensions(rowMatch)

      brands.push(brand)
    }

    return brands
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å–µ–∫—Ü–∏—é features —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private parseFeatures(rowXml: string): LaximoFeature[] {
    const features: LaximoFeature[] = []
    
    const featuresMatch = rowXml.match(/<features[^>]*>([\s\S]*?)<\/features>/)
    if (!featuresMatch) {
      return features
    }

    const featuresData = featuresMatch[1]
    const featureMatches = featuresData.match(/<feature[^>]*\/?>|<feature[^>]*>[\s\S]*?<\/feature>/g)
    
    if (!featureMatches) {
      return features
    }

    for (const featureMatch of featureMatches) {
      const getAttribute = (name: string): string => {
        const match = featureMatch.match(new RegExp(`${name}="([^"]*)"`, 'i'))
        return match ? match[1] : ''
      }

      const feature: LaximoFeature = {
        name: getAttribute('name')
      }

      const example = getAttribute('example')
      if (example) {
        feature.example = example
      }

      features.push(feature)
    }

    return features
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å–µ–∫—Ü–∏—é extensions —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private parseExtensions(rowXml: string): LaximoExtensions | undefined {
    const extensionsMatch = rowXml.match(/<extensions[^>]*>([\s\S]*?)<\/extensions>/)
    if (!extensionsMatch) {
      return undefined
    }

    const extensionsData = extensionsMatch[1]
    const operationsMatch = extensionsData.match(/<operations[^>]*>([\s\S]*?)<\/operations>/)
    
    if (!operationsMatch) {
      return undefined
    }

    const operationsData = operationsMatch[1]
    const operationMatches = operationsData.match(/<operation[^>]*>[\s\S]*?<\/operation>/g)
    
    if (!operationMatches) {
      return undefined
    }

    const operations: LaximoOperation[] = []

    for (const operationMatch of operationMatches) {
      const getAttribute = (name: string): string => {
        const match = operationMatch.match(new RegExp(`${name}="([^"]*)"`, 'i'))
        return match ? match[1] : ''
      }

      const operation: LaximoOperation = {
        name: getAttribute('name'),
        kind: getAttribute('kind'),
        description: getAttribute('description'),
        fields: []
      }

      // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
      const fieldMatches = operationMatch.match(/<field[^>]*\/?>|<field[^>]*>[\s\S]*?<\/field>/g)
      if (fieldMatches) {
        for (const fieldMatch of fieldMatches) {
          const getFieldAttr = (name: string): string => {
            const match = fieldMatch.match(new RegExp(`${name}="([^"]*)"`, 'i'))
            return match ? match[1] : ''
          }

          const field: LaximoField = {
            name: getFieldAttr('name'),
            description: getFieldAttr('description')
          }

          const pattern = getFieldAttr('pattern')
          if (pattern) {
            field.pattern = pattern
          }

          const example = getFieldAttr('example')
          if (example) {
            field.example = example
          }

          operation.fields.push(field)
        }
      }

      operations.push(operation)
    }

    return { operations }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ SOAP API
   */
  async getListCatalogs(): Promise<LaximoBrand[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!this.login || !this.password) {
      throw new Error('Laximo credentials not configured. Please set LAXIMO_LOGIN and LAXIMO_PASSWORD environment variables.')
    }

    const command = 'ListCatalogs:Locale=ru_RU'
    const hmac = this.createHMAC(command)
    
    console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SOAP –∑–∞–ø—Ä–æ—Å –∫ Laximo API...')
    console.log('üîê Login:', this.login)
    console.log('üìù Command:', command)
    console.log('üîó HMAC:', hmac)
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º SOAP 1.1
    try {
      console.log('üìç Trying SOAP 1.1:', this.soap11Url)
      return await this.makeSOAPRequest(this.soap11Url, this.createSOAP11Envelope(command, this.login, hmac), 'urn:QueryDataLogin')
    } catch (soap11Error) {
      console.log('‚ùå SOAP 1.1 failed:', soap11Error instanceof Error ? soap11Error.message : 'Unknown error')
      
      // Fallback –Ω–∞ SOAP 1.2
      try {
        console.log('üìç Trying SOAP 1.2:', this.soap12Url)
        return await this.makeSOAPRequest(this.soap12Url, this.createSOAP12Envelope(command, this.login, hmac), 'urn:QueryDataLogin')
      } catch (soap12Error) {
        console.error('‚ùå Both SOAP 1.1 and 1.2 failed')
        throw soap12Error
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç SOAP –∑–∞–ø—Ä–æ—Å
   */
  private async makeSOAPRequest(url: string, soapEnvelope: string, soapAction: string): Promise<LaximoBrand[]> {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'text/xml; charset=utf-8',
        'SOAPAction': `"${soapAction}"`
      },
      body: soapEnvelope
    })
    
    if (!response.ok) {
      if (response.status === 404) {
        throw new Error(`Laximo API endpoint not found: ${url}. Please check the current API documentation.`)
      }
      throw new Error(`Laximo SOAP API error: ${response.status} ${response.statusText}`)
    }

    const xmlText = await response.text()
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Laximo API')
    console.log('üìã Response length:', xmlText.length)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (xmlText.includes('E_ACCESSDENIED')) {
      if (xmlText.includes('MAC check failed')) {
        throw new Error('Invalid Laximo credentials: MAC check failed')
      }
      if (xmlText.includes('You don`t have active subscription')) {
        throw new Error('No active Laximo subscription')
      }
      throw new Error('Access denied to Laximo API')
    }
    
    return this.parseListCatalogsResponse(xmlText)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ
   */
  async getCatalogInfo(catalogCode: string): Promise<LaximoCatalogInfo | null> {
    const command = `GetCatalogInfo:Locale=ru_RU|Catalog=${catalogCode}|withPermissions=true`
    const hmac = this.createHMAC(command)
    
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ:', catalogCode)
    console.log('üìù Command:', command)
    console.log('üîó HMAC:', hmac)
    
    try {
      const response = await this.makeBasicSOAPRequest(this.soap11Url, this.createSOAP11Envelope(command, this.login, hmac), 'urn:QueryDataLogin')
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Laximo API –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞')
      console.log('üìã Response length:', response.length)
      
      const result = this.parseCatalogInfoResponse(response)
      console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', result ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ—É–¥–∞—á–Ω–æ')
      
      return result
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–∞–ª–æ–≥–µ:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ wizard
   */
  async getWizard2(catalogCode: string, ssd: string = ''): Promise<LaximoWizardStep[]> {
    const command = `GetWizard2:Locale=ru_RU|Catalog=${catalogCode}|ssd=${ssd}`
    const hmac = this.createHMAC(command)
    
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã wizard –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞:', catalogCode)
    
    try {
      const response = await this.makeBasicSOAPRequest(this.soap11Url, this.createSOAP11Envelope(command, this.login, hmac), 'urn:QueryDataLogin')
      return this.parseWizard2Response(response)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ wizard:', error)
      return []
    }
  }

  /**
   * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ VIN/Frame –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
   * @see https://doc.laximo.ru/ru/cat/FindVehicle
   */
  async findVehicleGlobal(vin: string): Promise<LaximoVehicleSearchResult[]> {
    try {
      console.log('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN/Frame:', vin)
      
      const command = `FindVehicle:Locale=ru_RU|IdentString=${vin}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù Global FindVehicle Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseVehicleSearchResponse(xmlText)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN/Frame:', error)
      return []
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN/Frame —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
   * @see https://doc.laximo.ru/ru/cat/FindVehicle
   */
  async findVehicle(catalogCode: string, vin: string): Promise<LaximoVehicleSearchResult[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN/Frame:', vin)
      console.log('üìã –ö–∞—Ç–∞–ª–æ–≥:', catalogCode)
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º IdentString –≤–º–µ—Å—Ç–æ vin
      const command = `FindVehicle:Locale=ru_RU|Catalog=${catalogCode}|IdentString=${vin}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù FindVehicle Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      const vehicles = this.parseVehicleSearchResponse(xmlText)
      
      if (vehicles.length === 0) {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ VIN/Frame:', vin)
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö)
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö...')
        const globalCommand = `FindVehicle:Locale=ru_RU|IdentString=${vin}`
        const globalHmac = this.createHMAC(globalCommand)
        
        console.log('üìù Global FindVehicle Command:', globalCommand)
        
        const globalSoapEnvelope = this.createSOAP11Envelope(globalCommand, this.login, globalHmac)
        const globalXmlText = await this.makeBasicSOAPRequest(this.soap11Url, globalSoapEnvelope, 'urn:QueryDataLogin')
        
        return this.parseVehicleSearchResponse(globalXmlText)
      }
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`)
      return vehicles
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN/Frame:', error)
      return []
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ wizard (SSD)
   */
  async findVehicleByWizard(catalogCode: string, ssd: string): Promise<LaximoVehicleSearchResult[]> {
    const command = `FindVehicleByWizard2:Locale=ru_RU|Catalog=${catalogCode}|ssd=${ssd}`
    const hmac = this.createHMAC(command)
    
    console.log('üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ wizard SSD:', ssd)
    
    try {
      const response = await this.makeBasicSOAPRequest(this.soap11Url, this.createSOAP11Envelope(command, this.login, hmac), 'urn:QueryDataLogin')
      const vehicles = this.parseVehicleSearchResponse(response)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º SSD –∏–∑ –æ—Ç–≤–µ—Ç–∞ API, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π SSD
      return vehicles.map(vehicle => ({
        ...vehicle,
        ssd: vehicle.ssd || ssd
      }))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ wizard:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
   */
  async getVehicleInfo(catalogCode: string, vehicleId: string, ssd?: string, localized: boolean = true): Promise<LaximoVehicleInfo | null> {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:', vehicleId)
    console.log('üìã –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - SSD:', ssd ? `${ssd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    
    // –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ wizard, SSD —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    if (!ssd || ssd.trim() === '') {
      console.log('‚ö†Ô∏è SSD –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      return {
        vehicleid: vehicleId,
        name: `–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${catalogCode}`,
        ssd: '',
        brand: catalogCode.replace(/\d+$/, ''),
        catalog: catalogCode,
        attributes: []
      }
    }
    
    const command = `GetVehicleInfo:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=${vehicleId}|ssd=${ssd}|Localized=${localized}`
    const hmac = this.createHMAC(command)
    
    console.log('üìù Command:', command)
    console.log('üîó HMAC:', hmac)
    
    try {
      const response = await this.makeBasicSOAPRequest(this.soap11Url, this.createSOAP11Envelope(command, this.login, hmac), 'urn:QueryDataLogin')
      return this.parseVehicleInfoResponse(response)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:', error)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ')
      return {
        vehicleid: vehicleId,
        name: `–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${catalogCode}`,
        ssd: ssd || '',
        brand: catalogCode.replace(/\d+$/, ''),
        catalog: catalogCode,
        attributes: []
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
   */
  async getListUnits(catalogCode: string, vehicleId?: string, ssd?: string, categoryId?: string): Promise<LaximoQuickGroup[]> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º —É–∑–ª—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', vehicleId || '–æ–±—â–∏–µ')
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { vehicleId, categoryId, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è vehicleId, SSD –∏ categoryId
      let command = `ListUnits:Locale=ru_RU|Catalog=${catalogCode}`
      if (vehicleId) {
        command += `|VehicleId=${vehicleId}`
      }
      if (ssd && ssd.trim() !== '') {
        command += `|ssd=${ssd}`
      }
      if (categoryId) {
        command += `|CategoryId=${categoryId}`
      }
      
      const hmac = this.createHMAC(command)
      
      console.log('üìù ListUnits Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseListUnitsResponse(xmlText)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞:', error)
      return []
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ListUnits –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç LaximoQuickGroup
   */
  private parseListUnitsResponse(xmlText: string): LaximoQuickGroup[] {
    console.log('üîç –ü–∞—Ä—Å–∏–º —É–∑–ª—ã –∫–∞—Ç–∞–ª–æ–≥–∞...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return []
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListUnits
    const unitsMatch = resultData.match(/<ListUnits?[^>]*>([\s\S]*?)<\/ListUnits?>/) ||
                       resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!unitsMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListUnits')
      return []
    }

    const groups: LaximoQuickGroup[] = []
    const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
    let match
    
    while ((match = rowPattern.exec(unitsMatch[1])) !== null) {
      const attributes = match[1]
      const content = match[2] || ''
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
      const unitid = this.extractAttribute(attributes, 'unitid') || this.extractAttribute(attributes, 'id')
      const name = this.extractAttribute(attributes, 'name') || this.extractAttribute(attributes, 'description')
      const hasDetails = this.extractAttribute(attributes, 'hasdetails') === 'true'
      
      if (unitid && name) {
        const group: LaximoQuickGroup = {
          quickgroupid: unitid,
          name: name,
          link: hasDetails
        }
        
        console.log('üì¶ –ù–∞–π–¥–µ–Ω —É–∑–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:', { unitid, name, hasDetails })
        groups.push(group)
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${groups.length} —É–∑–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞`)
    return groups
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
   */
  async getListCategories(catalogCode: string, vehicleId?: string, ssd?: string): Promise<LaximoQuickGroup[]> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', catalogCode)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { vehicleId, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
      // CategoryId=-1 –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      let command = `ListCategories:Locale=ru_RU|Catalog=${catalogCode}|CategoryId=-1`
      
      // –î–æ–±–∞–≤–ª—è–µ–º VehicleId –∏ ssd –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      if (vehicleId) {
        command += `|VehicleId=${vehicleId}`
      }
      if (ssd && ssd.trim() !== '') {
        command += `|ssd=${ssd}`
      }
      
      const hmac = this.createHMAC(command)
      
      console.log('üìù ListCategories Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseListCategoriesResponse(xmlText)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞:', error)
      return []
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ListCategories –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç LaximoQuickGroup
   */
  private parseListCategoriesResponse(xmlText: string): LaximoQuickGroup[] {
    console.log('üîç –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return []
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListCategories
    const categoriesMatch = resultData.match(/<ListCategories?[^>]*>([\s\S]*?)<\/ListCategories?>/) ||
                           resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!categoriesMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListCategories')
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', resultData.substring(0, 500))
      return []
    }

    const groups: LaximoQuickGroup[] = []
    const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
    let match
    
    while ((match = rowPattern.exec(categoriesMatch[1])) !== null) {
      const attributes = match[1]
      const content = match[2] || ''
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
      const categoryid = this.extractAttribute(attributes, 'categoryid')
      const name = this.extractAttribute(attributes, 'name')
      const childrens = this.extractAttribute(attributes, 'childrens') === 'true'
      const parentcategoryid = this.extractAttribute(attributes, 'parentcategoryid')
      
      console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º row:', { categoryid, name, childrens, parentcategoryid, attributes })
      
      if (categoryid && name) {
        const group: LaximoQuickGroup = {
          quickgroupid: categoryid,
          name: name,
          link: true // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—Å–µ–≥–¥–∞ true, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–∑–ª—ã
        }
        
        console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞:', { categoryid, name, childrens, parentcategoryid })
        groups.push(group)
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${groups.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞`)
    return groups
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  async getListQuickGroup(catalogCode: string, vehicleId: string, ssd?: string): Promise<LaximoQuickGroup[]> {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', vehicleId)
    console.log('üìã –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - SSD:', ssd ? `${ssd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    
    // –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ wizard, SSD —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    if (!ssd || ssd.trim() === '') {
      console.log('‚ö†Ô∏è SSD –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...')
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—â–∏–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–∞–ª–æ–≥–∞
      try {
        const catalogCommand = `ListQuickGroup:Locale=ru_RU|Catalog=${catalogCode}`
        const catalogHmac = this.createHMAC(catalogCommand)
        console.log('üìù Catalog command:', catalogCommand)
        
        const soapEnvelope = this.createSOAP11Envelope(catalogCommand, this.login, catalogHmac)
        const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
        
        return this.parseListQuickGroupResponse(xmlText)
      } catch (catalogError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –≥—Ä—É–ø–ø –∫–∞—Ç–∞–ª–æ–≥–∞:', catalogError)
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ListCategories
      try {
        return await this.getListCategories(catalogCode)
      } catch (categoriesError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞:', categoriesError)
        return []
      }
    }

    try {
      const command = `ListQuickGroup:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=${vehicleId}|ssd=${ssd}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseListQuickGroupResponse(xmlText)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error)
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ListUnits
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —É–∑–ª—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...')
      try {
        return await this.getListUnits(catalogCode, vehicleId, ssd)
      } catch (unitsError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞:', unitsError)
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ListCategories
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...')
      try {
        return await this.getListCategories(catalogCode, vehicleId, ssd)
      } catch (categoriesError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞:', categoriesError)
      }
      
      return []
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π SOAP –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
   */
  protected async makeBasicSOAPRequest(url: string, soapEnvelope: string, soapAction: string): Promise<string> {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'text/xml; charset=utf-8',
        'SOAPAction': `"${soapAction}"`
      },
      body: soapEnvelope
    })
    
    if (!response.ok) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      let errorBody = ''
      try {
        errorBody = await response.text()
        console.error('üö® Laximo API error body:', errorBody.substring(0, 1000))
      } catch (e) {
        console.error('üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏:', e)
      }
      throw new Error(`Laximo API error: ${response.status} ${response.statusText}`)
    }

    const xmlText = await response.text()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (xmlText.includes('E_ACCESSDENIED')) {
      throw new Error('Access denied to Laximo API')
    }
    
    return xmlText
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GetCatalogInfo
   */
  private parseCatalogInfoResponse(xmlText: string): LaximoCatalogInfo | null {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ –∫–∞—Ç–∞–ª–æ–≥–µ...')
    
    const resultData = this.extractResultData(xmlText)
    console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', resultData ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    
    if (!resultData) {
      console.log('‚ùå resultData is null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null')
      return null
    }

    const catalogMatch = resultData.match(/<row([^>]*)>/);
    console.log('üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π row:', catalogMatch ? '–¥–∞' : '–Ω–µ—Ç')
    
    if (!catalogMatch) {
      console.log('‚ùå catalogMatch is null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null')
      return null
    }
    
    const attributes = catalogMatch[1];
    console.log('üì¶ –ê—Ç—Ä–∏–±—É—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞:', attributes)
    
    const getAttribute = (name: string): string => {
      const match = attributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
      return match ? match[1] : ''
    }

    const features = this.parseFeatures(resultData)
    const permissions = this.parsePermissions(resultData)

    const result = {
      brand: getAttribute('brand'),
      code: getAttribute('code'),
      icon: getAttribute('icon'),
      name: getAttribute('name'),
      supportdetailapplicability: getAttribute('supportdetailapplicability') === 'true',
      supportparameteridentification2: getAttribute('supportparameteridentification2') === 'true',
      supportquickgroups: getAttribute('supportquickgroups') === 'true',
      supportvinsearch: getAttribute('supportvinsearch') === 'true',
      supportplateidentification: getAttribute('supportplateidentification') === 'true' || undefined,
      vinexample: getAttribute('vinexample') || undefined,
      plateexample: getAttribute('plateexample') || undefined,
      features,
      permissions
    }
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', result)
    
    return result
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GetWizard2
   */
  private parseWizard2Response(xmlText: string): LaximoWizardStep[] {
    const resultData = this.extractResultData(xmlText)
    if (!resultData) return []

    const rowMatches = resultData.match(/<row[^>]*>[\s\S]*?<\/row>/g)
    if (!rowMatches) return []

    const steps: LaximoWizardStep[] = []

    for (const rowMatch of rowMatches) {
      const rowTagMatch = rowMatch.match(/<row([^>]*)>/);
      if (!rowTagMatch) continue;
      
      const attributes = rowTagMatch[1];
      
      const getAttribute = (name: string): string => {
        const match = attributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
        return match ? match[1] : ''
      }

      const options = this.parseWizardOptions(rowMatch)

      steps.push({
        allowlistvehicles: getAttribute('allowlistvehicles') === 'true',
        automatic: getAttribute('automatic') === 'true',
        conditionid: getAttribute('conditionid'),
        determined: getAttribute('determined') === 'true',
        name: getAttribute('name'),
        type: getAttribute('type'),
        ssd: getAttribute('ssd') || undefined,
        value: getAttribute('value') || undefined,
        valueid: getAttribute('valueid') || undefined,
        options
      })
    }

    return steps
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
   */
  private parseVehicleSearchResponse(xmlText: string): LaximoVehicleSearchResult[] {
    console.log('üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return []
    }

    const rowMatches = resultData.match(/<row[^>]*>[\s\S]*?<\/row>/g)
    if (!rowMatches) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ row –≤ –æ—Ç–≤–µ—Ç–µ')
      return []
    }

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${rowMatches.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`)
    const vehicles: LaximoVehicleSearchResult[] = []

    for (const rowMatch of rowMatches) {
      const rowTagMatch = rowMatch.match(/<row([^>]*)>/);
      if (!rowTagMatch) continue;
      
      const attributes = rowTagMatch[1];
      console.log('üì¶ –ê—Ç—Ä–∏–±—É—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', attributes.substring(0, 200));
      
      const getAttribute = (name: string): string => {
        const match = attributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
        return match ? match[1] : ''
      }

      // –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ <attribute>
      const attributeMap = new Map<string, string>()
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log('üîç –ü–æ–ª–Ω—ã–π XML –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏:', rowMatch.substring(0, 500))
      
      const attributeMatches = rowMatch.match(/<attribute[^>]*\/?>|<attribute[^>]*>[\s\S]*?<\/attribute>/g)
      
      if (attributeMatches) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${attributeMatches.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤`)
        console.log('üîç –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤:', attributeMatches.slice(0, 3))
        
        for (const attrMatch of attributeMatches) {
          const attrTagMatch = attrMatch.match(/<attribute([^>]*)>/);
          if (!attrTagMatch) continue;
          
          const attrAttributes = attrTagMatch[1];
          
          const getAttrAttribute = (name: string): string => {
            const match = attrAttributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
            return match ? match[1] : ''
          }

          const key = getAttrAttribute('key')
          const value = getAttrAttribute('value')
          
          if (key && value) {
            attributeMap.set(key, value)
            console.log(`üîë –ê—Ç—Ä–∏–±—É—Ç: ${key} = ${value}`)
          }
        }
        console.log(`üìä –í—Å–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–µ: ${attributeMap.size}`)
      } else {
        console.log('‚ùå –î–æ—á–µ—Ä–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ rowMatch:')
        console.log('   - –°–æ–¥–µ—Ä–∂–∏—Ç <attribute:', rowMatch.includes('<attribute'))
        console.log('   - –î–ª–∏–Ω–∞ rowMatch:', rowMatch.length)
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ row –∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ attribute
      const vehicleName = getAttribute('name')
      
      // –ò—â–µ–º –≥–æ–¥ –≤ —Ä–∞–∑–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
      const year = getAttribute('year') || 
                   attributeMap.get('manufactured') || 
                   attributeMap.get('date')?.split('.').pop() || 
                   attributeMap.get('modelyear') ||
                   attributeMap.get('productionyear') || ''
      
      // –ò—â–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö 
      const engine = getAttribute('engine') || 
                     attributeMap.get('engine') || 
                     attributeMap.get('engine_info') ||
                     attributeMap.get('enginecode') ||
                     attributeMap.get('enginetype') || ''
      
      const modification = getAttribute('modification') || attributeMap.get('modification') || ''
      const bodytype = getAttribute('bodytype') || attributeMap.get('bodytype') || ''
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (attributeMap.size > 0) {
        console.log('üóùÔ∏è –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤:', Array.from(attributeMap.keys()).sort())
      }
      
      console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
      console.log(`  - year: "${year}" (–∏–∑: getAttribute('year')="${getAttribute('year')}", manufactured="${attributeMap.get('manufactured')}", date="${attributeMap.get('date')}")`)
      console.log(`  - engine: "${engine}" (–∏–∑: getAttribute('engine')="${getAttribute('engine')}", engine="${attributeMap.get('engine')}", engine_info="${attributeMap.get('engine_info')}")`)
      console.log(`  - modification: "${modification}"`)
      console.log(`  - bodytype: "${bodytype}"`)
      
      const vehicle = {
        vehicleid: getAttribute('vehicleid'),
        name: vehicleName || undefined,
        brand: getAttribute('brand'),
        catalog: getAttribute('catalog') || undefined,
        model: vehicleName || getAttribute('model'),
        modification: modification,
        year: year,
        bodytype: bodytype,
        engine: engine,
        notes: getAttribute('notes') || undefined,
        ssd: getAttribute('ssd') || undefined,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
        grade: attributeMap.get('grade') || undefined,
        transmission: attributeMap.get('transmission') || undefined,
        doors: attributeMap.get('doors') || undefined,
        creationregion: attributeMap.get('creationregion') || undefined,
        destinationregion: attributeMap.get('destinationregion') || undefined,
        date: attributeMap.get('date') || undefined,
        manufactured: attributeMap.get('manufactured') || undefined,
        framecolor: attributeMap.get('framecolor') || undefined,
        trimcolor: attributeMap.get('trimcolor') || undefined,
        datefrom: attributeMap.get('datefrom') || undefined,
        dateto: attributeMap.get('dateto') || undefined,
        frame: attributeMap.get('frame') || undefined,
        frames: attributeMap.get('frames') || undefined,
        framefrom: attributeMap.get('framefrom') || undefined,
        frameto: attributeMap.get('frameto') || undefined,
        engine1: attributeMap.get('engine1') || undefined,
        engine2: attributeMap.get('engine2') || undefined,
        engine_info: attributeMap.get('engine_info') || undefined,
        engineno: attributeMap.get('engineno') || undefined,
        options: attributeMap.get('options') || undefined,
        modelyearfrom: attributeMap.get('modelyearfrom') || undefined,
        modelyearto: attributeMap.get('modelyearto') || undefined,
        description: attributeMap.get('description') || undefined,
        market: attributeMap.get('market') || undefined,
        prodRange: attributeMap.get('prodrange') || undefined, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–∑ API
        prodPeriod: attributeMap.get('prodPeriod') || undefined,
        carpet_color: attributeMap.get('carpet_color') || undefined,
        seat_combination_code: attributeMap.get('seat_combination_code') || undefined,
      }
      
      console.log('üöó –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', {
        vehicleid: vehicle.vehicleid,
        name: vehicleName || `${vehicle.brand} ${vehicle.model}`,
        brand: vehicle.brand,
        catalog: vehicle.catalog,
        engine: engine,
        year: year,
        ssd: vehicle.ssd ? vehicle.ssd.substring(0, 50) + '...' : '–Ω–µ—Ç SSD',
        modification: modification,
        model: vehicle.model,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        transmission: vehicle.transmission,
        market: vehicle.market,
        framecolor: vehicle.framecolor,
        trimcolor: vehicle.trimcolor,
        date: vehicle.date,
        manufactured: vehicle.manufactured,
        prodRange: vehicle.prodRange,
        prodPeriod: vehicle.prodPeriod,
        engine_info: vehicle.engine_info,
        engineno: vehicle.engineno
      })
      
      console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º:', JSON.stringify(vehicle, null, 2))
      
      vehicles.push(vehicle)
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`)
    return vehicles
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
   */
  private parseVehicleInfoResponse(xmlText: string): LaximoVehicleInfo | null {
    const resultData = this.extractResultData(xmlText)
    if (!resultData) return null

    const rowMatch = resultData.match(/<row([^>]*)>([\s\S]*?)<\/row>/)
    if (!rowMatch) return null

    const attributes = rowMatch[1]
    const content = rowMatch[2]
    
    const getAttribute = (name: string): string => {
      const match = attributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
      return match ? match[1] : ''
    }

    // –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    const vehicleAttributes: LaximoVehicleAttribute[] = []
    const attributeMatches = content.match(/<attribute[^>]*\/?>|<attribute[^>]*>[\s\S]*?<\/attribute>/g)
    
    if (attributeMatches) {
      for (const attrMatch of attributeMatches) {
        const attrTagMatch = attrMatch.match(/<attribute([^>]*)>/);
        if (!attrTagMatch) continue;
        
        const attrAttributes = attrTagMatch[1];
        
        const getAttrAttribute = (name: string): string => {
          const match = attrAttributes.match(new RegExp(`${name}="([^"]*)"`, 'i'))
          return match ? match[1] : ''
        }

        vehicleAttributes.push({
          key: getAttrAttribute('key'),
          name: getAttrAttribute('name'),
          value: getAttrAttribute('value')
        })
      }
    }

    return {
      vehicleid: getAttribute('vehicleid'),
      name: getAttribute('name'),
      ssd: getAttribute('ssd'),
      brand: getAttribute('brand'),
      catalog: getAttribute('catalog') || '',
      attributes: vehicleAttributes
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ XML
   */
  protected extractResultData(xmlText: string): string | null {
    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ XML...')
    console.log('üìÑ XML –¥–ª–∏–Ω–∞:', xmlText.length)
    
    const soapResultMatch = xmlText.match(/<ns:return[^>]*>([\s\S]*?)<\/ns:return>/) || 
                           xmlText.match(/<return[^>]*>([\s\S]*?)<\/return>/)
    const responseMatch = xmlText.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    console.log('üéØ soapResultMatch –Ω–∞–π–¥–µ–Ω:', !!soapResultMatch)
    console.log('üéØ responseMatch –Ω–∞–π–¥–µ–Ω:', !!responseMatch)
    
    if (soapResultMatch) {
      const result = soapResultMatch[1]
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&amp;/g, '&')
      console.log('üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç SOAP –¥–ª–∏–Ω–∞:', result.length)
      console.log('üìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', result.substring(0, 500))
      return result
    } else if (responseMatch) {
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç response –¥–ª–∏–Ω–∞:', responseMatch[1].length)
      return responseMatch[1]
    }
    
    console.log('‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return null
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–ø—Ü–∏–∏ wizard
   */
  private parseWizardOptions(rowXml: string): LaximoWizardOption[] {
    const options: LaximoWizardOption[] = []
    
    const optionsMatch = rowXml.match(/<options[^>]*>([\s\S]*?)<\/options>/)
    if (!optionsMatch) return options

    const optionsData = optionsMatch[1]
    const optionMatches = optionsData.match(/<row[^>]*\/?>|<row[^>]*>[\s\S]*?<\/row>/g)
    
    if (!optionMatches) return options

    for (const optionMatch of optionMatches) {
      const getAttribute = (name: string): string => {
        const match = optionMatch.match(new RegExp(`${name}="([^"]*)"`, 'i'))
        return match ? match[1] : ''
      }

      options.push({
        key: getAttribute('key'),
        value: getAttribute('value')
      })
    }

    return options
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  private parsePermissions(xmlText: string): string[] {
    const permissions: string[] = []
    
    const permissionsMatch = xmlText.match(/<permissions[^>]*>([\s\S]*?)<\/permissions>/)
    if (!permissionsMatch) return permissions

    const permissionsData = permissionsMatch[1]
    const permissionMatches = permissionsData.match(/<permission[^>]*>([\s\S]*?)<\/permission>/g)
    
    if (!permissionMatches) return permissions

    for (const permissionMatch of permissionMatches) {
      const content = permissionMatch.replace(/<[^>]*>/g, '').trim()
      if (content) {
        permissions.push(content)
      }
    }

    return permissions
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ListQuickGroup
   */
  private parseListQuickGroupResponse(xmlText: string): LaximoQuickGroup[] {
    console.log('üîç –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return []
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListQuickGroups
    const quickGroupsMatch = resultData.match(/<ListQuickGroups?[^>]*>([\s\S]*?)<\/ListQuickGroups?>/) ||
                            resultData.match(/<ListQuickGroup[^>]*>([\s\S]*?)<\/ListQuickGroup>/)
    
    if (!quickGroupsMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListQuickGroups')
      return []
    }

    const parsedGroups = this.parseQuickGroupRows(quickGroupsMatch[1])
    console.log('üèóÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê XML:')
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:', parsedGroups.length)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    parsedGroups.slice(0, 3).forEach((group, index) => {
      console.log(`üì¶ –ì—Ä—É–ø–ø–∞ ${index + 1}:`, {
        id: group.quickgroupid,
        name: group.name,
        link: group.link,
        children: group.children?.length || 0
      })
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (group.children && group.children.length > 0) {
        group.children.slice(0, 3).forEach((child, childIndex) => {
          console.log(`  ‚îî‚îÄ –î–æ—á–µ—Ä–Ω—è—è –≥—Ä—É–ø–ø–∞ ${childIndex + 1}:`, {
            id: child.quickgroupid,
            name: child.name,
            link: child.link,
            children: child.children?.length || 0
          })
        })
      }
    })
    
    return parsedGroups
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
   */
  private parseQuickGroupRows(xmlData: string): LaximoQuickGroup[] {
    const groups: LaximoQuickGroup[] = []
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏ row —Å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
    let match
    
    while ((match = rowPattern.exec(xmlData)) !== null) {
      const attributes = match[1]
      const content = match[2] || ''
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
      const quickgroupid = this.extractAttribute(attributes, 'quickgroupid')
      const name = this.extractAttribute(attributes, 'name')
      const link = this.extractAttribute(attributes, 'link') === 'true'
      
      const group: LaximoQuickGroup = {
        quickgroupid,
        name,
        link
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –ø–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      if (content.trim()) {
        const childGroups = this.parseQuickGroupRows(content)
        if (childGroups.length > 0) {
          group.children = childGroups
        }
      }
      
      console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', { quickgroupid, name, link, children: group.children?.length || 0 })
      groups.push(group)
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${groups.length} –≥—Ä—É–ø–ø`)
    return groups
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
   */
  protected extractAttribute(attributesString: string, attributeName: string): string {
    const regex = new RegExp(`${attributeName}="([^"]*)"`, 'i')
    const match = attributesString.match(regex)
    return match ? match[1] : ''
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
   */
  async getListQuickDetail(catalogCode: string, vehicleId: string, quickGroupId: string, ssd?: string): Promise<LaximoQuickDetail | null> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:', quickGroupId)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { catalogCode, vehicleId, quickGroupId, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      if (!ssd || ssd.trim() === '') {
        console.log('‚ùå SSD –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è ListQuickDetail')
        throw new Error('SSD parameter is required for ListQuickDetail')
      }

      const command = `ListQuickDetail:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=${vehicleId}|QuickGroupId=${quickGroupId}|ssd=${ssd}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù ListQuickDetail Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseListQuickDetailResponse(xmlText, quickGroupId)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ListQuickDetail
   */
  private parseListQuickDetailResponse(xmlText: string, quickGroupId: string): LaximoQuickDetail | null {
    console.log('üîç –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return null
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListQuickDetail
    const quickDetailMatch = resultData.match(/<ListQuickDetail[^>]*>([\s\S]*?)<\/ListQuickDetail>/) ||
                            resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!quickDetailMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListQuickDetail')
      return null
    }

    const quickDetail: LaximoQuickDetail = {
      quickgroupid: quickGroupId,
      name: '',
      units: []
    }

    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Category)
    const categoryPattern = /<Category([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/Category>)/g
    let categoryMatch

    while ((categoryMatch = categoryPattern.exec(quickDetailMatch[1])) !== null) {
      const categoryAttributes = categoryMatch[1]
      const categoryContent = categoryMatch[2] || ''
      
      const categoryName = this.extractAttribute(categoryAttributes, 'name')
      console.log('üìÇ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryName)

      // –í –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—â–µ–º —É–∑–ª—ã (Unit)
      const unitPattern = /<Unit([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/Unit>)/g
      let unitMatch

      while ((unitMatch = unitPattern.exec(categoryContent)) !== null) {
        const unitAttributes = unitMatch[1]
        const unitContent = unitMatch[2] || ''
        
        const unitId = this.extractAttribute(unitAttributes, 'unitid')
        const unitName = this.extractAttribute(unitAttributes, 'name')
        const unitCode = this.extractAttribute(unitAttributes, 'code')
        
        console.log('üîß –ù–∞–π–¥–µ–Ω —É–∑–µ–ª:', { unitId, unitName, unitCode })

        const unit: LaximoUnit = {
          unitid: unitId,
          name: unitName,
          code: unitCode,
          details: []
        }

        // –í –∫–∞–∂–¥–æ–º —É–∑–ª–µ –∏—â–µ–º –¥–µ—Ç–∞–ª–∏ (Detail)
        const detailPattern = /<Detail([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/Detail>)/g
        let detailMatch

        while ((detailMatch = detailPattern.exec(unitContent)) !== null) {
          const detailAttributes = detailMatch[1]
          const detailContent = detailMatch[2] || ''
          
          const detailId = this.extractAttribute(detailAttributes, 'detailid')
          const detailName = this.extractAttribute(detailAttributes, 'name')
          const oem = this.extractAttribute(detailAttributes, 'oem')
          const brand = this.extractAttribute(detailAttributes, 'brand')
          
          console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å:', { detailId, detailName, oem, brand })

          const detail: LaximoDetail = {
            detailid: detailId,
            name: detailName,
            oem: oem,
            brand: brand,
            attributes: []
          }

          // –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–µ—Ç–∞–ª–∏
          const attributePattern = /<attribute([^>]*?)(?:\s*\/>)/g
          let attrMatch

          while ((attrMatch = attributePattern.exec(detailContent)) !== null) {
            const attrAttributes = attrMatch[1]
            
            const key = this.extractAttribute(attrAttributes, 'key')
            const name = this.extractAttribute(attrAttributes, 'name')
            const value = this.extractAttribute(attrAttributes, 'value')
            
            if (key === 'applicablemodels') {
              detail.applicablemodels = value
            } else if (key === 'note') {
              detail.note = value
            } else {
              detail.attributes?.push({
                key,
                name: name || key,
                value
              })
            }
          }

          unit.details!.push(detail)
        }

        quickDetail.units!.push(unit)
      }
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (quickDetail.units!.length === 0) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞...')
      
      // –ò—â–µ–º —É–∑–ª—ã –Ω–∞–ø—Ä—è–º—É—é
      const directUnitPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
      let directUnitMatch

      while ((directUnitMatch = directUnitPattern.exec(quickDetailMatch[1])) !== null) {
        const unitAttributes = directUnitMatch[1]
        const unitContent = directUnitMatch[2] || ''
        
        const unitId = this.extractAttribute(unitAttributes, 'unitid') || 
                      this.extractAttribute(unitAttributes, 'id')
        const unitName = this.extractAttribute(unitAttributes, 'name') ||
                         this.extractAttribute(unitAttributes, 'description')
        
        if (unitId && unitName) {
          console.log('üîß –ù–∞–π–¥–µ–Ω —É–∑–µ–ª (–ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç):', { unitId, unitName })
          
          const unit: LaximoUnit = {
            unitid: unitId,
            name: unitName,
            details: []
          }
          
          quickDetail.units!.push(unit)
        }
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${quickDetail.units!.length} —É–∑–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ${quickGroupId}`)
    
    if (quickDetail.units!.length === 0) {
      return null
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if (!quickDetail.name && quickDetail.units!.length > 0) {
      quickDetail.name = `–ì—Ä—É–ø–ø–∞ ${quickGroupId}`
    }

    return quickDetail
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ OEM –Ω–æ–º–µ—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  async getOEMPartApplicability(catalogCode: string, vehicleId: string, oemNumber: string, ssd?: string): Promise<LaximoOEMResult | null> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–∏ –ø–æ OEM –Ω–æ–º–µ—Ä—É:', oemNumber)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { catalogCode, vehicleId, oemNumber, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      if (!ssd || ssd.trim() === '') {
        console.log('‚ùå SSD –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è GetOEMPartApplicability')
        throw new Error('SSD parameter is required for GetOEMPartApplicability')
      }

      const command = `GetOEMPartApplicability:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=${vehicleId}|OEM=${oemNumber}|ssd=${ssd}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù GetOEMPartApplicability Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseOEMPartApplicabilityResponse(xmlText, oemNumber)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ OEM –Ω–æ–º–µ—Ä—É:', error)
      throw error
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   */
  async searchVehicleDetails(catalogCode: string, vehicleId: string, searchQuery: string, ssd?: string): Promise<LaximoFulltextSearchResult | null> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', searchQuery)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { catalogCode, vehicleId, searchQuery, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é (vehicleId != 0) SSD –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É (vehicleId = 0) SSD –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
      if (vehicleId !== '0' && (!ssd || ssd.trim() === '')) {
        console.log('‚ùå SSD –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é')
        throw new Error('SSD parameter is required for vehicle-specific search')
      }

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const searchQueries = [
        searchQuery, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        encodeURIComponent(searchQuery), // URL –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        searchQuery.toLowerCase(), // –í –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        searchQuery.toUpperCase() // –í –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
      ]

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
      const translations: { [key: string]: string[] } = {
        '—Ñ–∏–ª—å—Ç—Ä': ['filter'],
        '–º–∞—Å–ª—è–Ω—ã–π': ['oil'],
        '–≤–æ–∑–¥—É—à–Ω—ã–π': ['air'],
        '—Ç–æ–ø–ª–∏–≤–Ω—ã–π': ['fuel'],
        '—Ç–æ—Ä–º–æ–∑–Ω–æ–π': ['brake'],
        '–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä': ['shock', 'absorber'],
        '—Å—Ü–µ–ø–ª–µ–Ω–∏–µ': ['clutch'],
        '—Ä–µ–º–µ–Ω—å': ['belt'],
        '—Å–≤–µ—á–∞': ['spark plug', 'plug'],
        '–¥–∞—Ç—á–∏–∫': ['sensor'],
        '–Ω–∞—Å–æ—Å': ['pump'],
        '—Ä–∞–¥–∏–∞—Ç–æ—Ä': ['radiator'],
        '—Ç–µ—Ä–º–æ—Å—Ç–∞—Ç': ['thermostat']
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const lowerQuery = searchQuery.toLowerCase()
      for (const [russian, english] of Object.entries(translations)) {
        if (lowerQuery.includes(russian)) {
          searchQueries.push(...english)
          searchQueries.push(...english.map(e => e.toUpperCase()))
        }
      }

      console.log('üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:', searchQueries)

      for (const query of searchQueries) {
        console.log(`üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${query}"`)
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å SSD –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
        let command: string
        if (ssd && ssd.trim() !== '') {
          command = `SearchVehicleDetails:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=${vehicleId}|Query=${query}|ssd=${ssd}`
        } else {
          command = `SearchVehicleDetails:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=${vehicleId}|Query=${query}`
        }
        
        const hmac = this.createHMAC(command)
        
        console.log('üìù SearchVehicleDetails Command:', command)
        console.log('üîó HMAC:', hmac)
        
        const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
        const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
        
        const result = this.parseSearchVehicleDetailsResponse(xmlText, query)
        
        if (result && result.details.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}":`, result.details.length)
          return result
        } else {
          console.log(`‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}"`)
        }
      }

      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ SSD (–¥–ª—è –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞)
      if (ssd && vehicleId !== '0') {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –±–µ–∑ SSD...')
        
        const catalogCommand = `SearchVehicleDetails:Locale=ru_RU|Catalog=${catalogCode}|VehicleId=0|Query=${encodeURIComponent(searchQuery)}`
        const catalogHmac = this.createHMAC(catalogCommand)
        
        console.log('üìù Catalog SearchVehicleDetails Command:', catalogCommand)
        console.log('üîó Catalog HMAC:', catalogHmac)
        
        const catalogSoapEnvelope = this.createSOAP11Envelope(catalogCommand, this.login, catalogHmac)
        const catalogXmlText = await this.makeBasicSOAPRequest(this.soap11Url, catalogSoapEnvelope, 'urn:QueryDataLogin')
        
        const catalogResult = this.parseSearchVehicleDetailsResponse(catalogXmlText, searchQuery)
        
        if (catalogResult && catalogResult.details.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:`, catalogResult.details.length)
          return catalogResult
        }
      }
      
      console.log('‚ùå –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
      return null
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GetOEMPartApplicability
   */
  private parseOEMPartApplicabilityResponse(xmlText: string, oemNumber: string): LaximoOEMResult | null {
    console.log('üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ OEM –Ω–æ–º–µ—Ä—É...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return null
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é GetOEMPartApplicability
    const oemResultMatch = resultData.match(/<GetOEMPartApplicability[^>]*>([\s\S]*?)<\/GetOEMPartApplicability>/) ||
                          resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!oemResultMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è GetOEMPartApplicability')
      return null
    }

    const oemResult: LaximoOEMResult = {
      oemNumber: oemNumber,
      categories: []
    }

    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Category)
    const categoryPattern = /<Category([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/Category>)/g
    let categoryMatch

    while ((categoryMatch = categoryPattern.exec(oemResultMatch[1])) !== null) {
      const categoryAttributes = categoryMatch[1]
      const categoryContent = categoryMatch[2] || ''
      
      const categoryId = this.extractAttribute(categoryAttributes, 'categoryid')
      const categoryName = this.extractAttribute(categoryAttributes, 'name')
      
      console.log('üìÇ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', { categoryId, categoryName })

      const category: LaximoOEMCategory = {
        categoryid: categoryId,
        name: categoryName,
        units: []
      }

      // –í –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—â–µ–º —É–∑–ª—ã (Unit)
      const unitPattern = /<Unit([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/Unit>)/g
      let unitMatch

      while ((unitMatch = unitPattern.exec(categoryContent)) !== null) {
        const unitAttributes = unitMatch[1]
        const unitContent = unitMatch[2] || ''
        
        const unitId = this.extractAttribute(unitAttributes, 'unitid')
        const unitName = this.extractAttribute(unitAttributes, 'name')
        const unitCode = this.extractAttribute(unitAttributes, 'code')
        const imageUrl = this.extractAttribute(unitAttributes, 'imageurl')
        
        console.log('üîß –ù–∞–π–¥–µ–Ω —É–∑–µ–ª:', { unitId, unitName, unitCode })

        const unit: LaximoOEMUnit = {
          unitid: unitId,
          name: unitName,
          code: unitCode,
          imageurl: imageUrl,
          details: []
        }

        // –í –∫–∞–∂–¥–æ–º —É–∑–ª–µ –∏—â–µ–º –¥–µ—Ç–∞–ª–∏ (Detail)
        const detailPattern = /<Detail([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/Detail>)/g
        let detailMatch

        while ((detailMatch = detailPattern.exec(unitContent)) !== null) {
          const detailAttributes = detailMatch[1]
          const detailContent = detailMatch[2] || ''
          
          const detailId = this.extractAttribute(detailAttributes, 'detailid')
          const detailName = this.extractAttribute(detailAttributes, 'name')
          const oem = this.extractAttribute(detailAttributes, 'oem')
          const brand = this.extractAttribute(detailAttributes, 'brand')
          const amount = this.extractAttribute(detailAttributes, 'amount')
          const range = this.extractAttribute(detailAttributes, 'range')
          
          console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å:', { detailId, detailName, oem, brand })

          const detail: LaximoOEMDetail = {
            detailid: detailId,
            name: detailName,
            oem: oem,
            brand: brand,
            amount: amount,
            range: range,
            attributes: []
          }

          // –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–µ—Ç–∞–ª–∏
          const attributePattern = /<attribute([^>]*?)(?:\s*\/>)/g
          let attrMatch

          while ((attrMatch = attributePattern.exec(detailContent)) !== null) {
            const attrAttributes = attrMatch[1]
            
            const key = this.extractAttribute(attrAttributes, 'key')
            const name = this.extractAttribute(attrAttributes, 'name')
            const value = this.extractAttribute(attrAttributes, 'value')
            
            detail.attributes?.push({
              key,
              name: name || key,
              value
            })
          }

          unit.details.push(detail)
        }

        category.units.push(unit)
      }

      oemResult.categories.push(category)
    }

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (oemResult.categories.length === 0) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ OEM —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...')
      
      // –ò—â–µ–º —É–∑–ª—ã –Ω–∞–ø—Ä—è–º—É—é
      const directUnitPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
      let directUnitMatch

      while ((directUnitMatch = directUnitPattern.exec(oemResultMatch[1])) !== null) {
        const unitAttributes = directUnitMatch[1]
        
        const unitId = this.extractAttribute(unitAttributes, 'unitid') || 
                      this.extractAttribute(unitAttributes, 'id')
        const unitName = this.extractAttribute(unitAttributes, 'name') ||
                         this.extractAttribute(unitAttributes, 'description')
        const oem = this.extractAttribute(unitAttributes, 'oem')
        
        if (unitId && unitName && oem) {
          console.log('üîß –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç):', { unitId, unitName, oem })
          
          // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          if (oemResult.categories.length === 0) {
            oemResult.categories.push({
              categoryid: 'default',
              name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
              units: []
            })
          }
          
          const unit: LaximoOEMUnit = {
            unitid: unitId,
            name: unitName,
            details: [{
              detailid: unitId,
              name: unitName,
              oem: oem
            }]
          }
          
          oemResult.categories[0].units.push(unit)
        }
      }
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${oemResult.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è OEM ${oemNumber}`)
    
    if (oemResult.categories.length === 0) {
      return null
    }

    return oemResult
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç SearchVehicleDetails
   */
  private parseSearchVehicleDetailsResponse(xmlText: string, searchQuery: string): LaximoFulltextSearchResult | null {
    console.log('üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–µ—Ç–∞–ª–µ–π...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return null
    }

    console.log('üìÑ XML –¥–ª–∏–Ω–∞:', xmlText.length)
    console.log('üìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', resultData.substring(0, 500))

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ª–Ω—ã–π XML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –ü–æ–ª–Ω—ã–π XML –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:')
    console.log('===== –ù–ê–ß–ê–õ–û XML =====')
    console.log(xmlText)
    console.log('===== –ö–û–ù–ï–¶ XML =====')

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é SearchVehicleDetails  
    const searchResultMatch = resultData.match(/<SearchVehicleDetails[^>]*>([\s\S]*?)<\/SearchVehicleDetails>/)
    
    if (!searchResultMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è SearchVehicleDetails')
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
      const alternativeMatches = [
        resultData.match(/<Details[^>]*>([\s\S]*?)<\/Details>/),
        resultData.match(/<Parts[^>]*>([\s\S]*?)<\/Parts>/),
        resultData.match(/<Items[^>]*>([\s\S]*?)<\/Items>/),
        resultData.match(/<SearchResult[^>]*>([\s\S]*?)<\/SearchResult>/)
      ]
      
      for (let i = 0; i < alternativeMatches.length; i++) {
        const match = alternativeMatches[i]
        if (match) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è ${i + 1}:`, match[0].substring(0, 100))
          const searchContent = match[1].trim()
          return this.parseSearchContent(searchContent, searchQuery)
        }
      }
      
      return null
    }

    const searchContent = searchResultMatch[1].trim()
    console.log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ SearchVehicleDetails:', searchContent)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (searchContent === '') {
      console.log('‚ö†Ô∏è SearchVehicleDetails –ø—É—Å—Ç - –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º')
      return null
    }

    return this.parseSearchContent(searchContent, searchQuery)
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
   */
  private parseSearchContent(searchContent: string, searchQuery: string): LaximoFulltextSearchResult | null {
    const searchResult: LaximoFulltextSearchResult = {
      searchQuery: searchQuery,
      details: []
    }

    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞...')
    console.log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):', searchContent.substring(0, 1000))

    // –§–æ—Ä–º–∞—Ç 1: —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo - <row oem="4M0115301H">–¢—Ä—É–±–∞ –º–∞—Å–ª–æ–Ω–∞–ª–∏–≤–Ω–∞—è</row>
    const documentationRowPattern = /<row\s+oem="([^"]+)"[^>]*>(.*?)<\/row>/g
    let docRowMatch

    while ((docRowMatch = documentationRowPattern.exec(searchContent)) !== null) {
      const oem = docRowMatch[1]
      const name = docRowMatch[2].trim()
      
      console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å (—Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏):', { oem, name })

      if (oem && name) {
        searchResult.details.push({
          oem: oem,
          name: name
        })
      }
    }

    // –§–æ—Ä–º–∞—Ç 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –≤ row
    if (searchResult.details.length === 0) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏...')
      
      const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
      let rowMatch

      while ((rowMatch = rowPattern.exec(searchContent)) !== null) {
        const rowAttributes = rowMatch[1]
        const rowContent = rowMatch[2] || ''
        
        console.log('üîç –ù–∞–π–¥–µ–Ω —Ç–µ–≥ row:', { attributes: rowAttributes, content: rowContent })
        
        const oem = this.extractAttribute(rowAttributes, 'oem') ||
                    this.extractAttribute(rowAttributes, 'code') ||
                    this.extractAttribute(rowAttributes, 'articul') ||
                    this.extractAttribute(rowAttributes, 'article')
        const name = this.extractAttribute(rowAttributes, 'name') ||
                     this.extractAttribute(rowAttributes, 'description') ||
                     this.extractAttribute(rowAttributes, 'title') ||
                     rowContent.trim()
        const brand = this.extractAttribute(rowAttributes, 'brand') ||
                      this.extractAttribute(rowAttributes, 'manufacturer')
        
        console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å (—Ñ–æ—Ä–º–∞—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤):', { oem, name, brand })

        if (oem && name) {
          searchResult.details.push({
            oem: oem,
            name: name,
            brand: brand,
            description: this.extractAttribute(rowAttributes, 'description')
          })
        }
      }
    }

    // –§–æ—Ä–º–∞—Ç 3: –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ oem="XXX" name="YYY"
    if (searchResult.details.length === 0) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤...')
      
      const oemPattern = /(?:oem|code|articul|article)="([^"]+)"/gi
      const namePattern = /(?:name|description|title)="([^"]+)"/gi
      
      let oemMatch
      const oems: string[] = []
      
      while ((oemMatch = oemPattern.exec(searchContent)) !== null) {
        oems.push(oemMatch[1])
      }
      
      let nameMatch
      const names: string[] = []
      
      while ((nameMatch = namePattern.exec(searchContent)) !== null) {
        names.push(nameMatch[1])
      }
      
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ OEM –Ω–æ–º–µ—Ä–æ–≤:', oems.length)
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π:', names.length)
      
      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º OEM –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
      for (let i = 0; i < Math.min(oems.length, names.length); i++) {
        console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã):', { oem: oems[i], name: names[i] })
        
        searchResult.details.push({
          oem: oems[i],
          name: names[i]
        })
      }
    }

    // –§–æ—Ä–º–∞—Ç 4: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    if (searchResult.details.length === 0) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç...')
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "–Ω–æ–º–µ—Ä - –Ω–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–Ω–æ–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏–µ"
      const textPattern = /([A-Z0-9]+)[\s\-]+(.+)/g
      const lines = searchContent.split(/[\r\n]+/)
      
      for (const line of lines) {
        const trimmedLine = line.trim()
        if (trimmedLine.length > 5) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
          const match = textPattern.exec(trimmedLine)
          if (match) {
            const oem = match[1].trim()
            const name = match[2].trim()
            
            console.log('üî© –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç):', { oem, name })
            
            if (oem && name) {
              searchResult.details.push({
                oem: oem,
                name: name
              })
            }
          }
        }
        textPattern.lastIndex = 0 // –°–±—Ä–æ—Å —Ä–µ–≥–µ–∫—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
      }
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResult.details.length} –¥–µ—Ç–∞–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`)
    
    if (searchResult.details.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Laximo')
      return null
    }

    return searchResult
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ)
   * @see https://doc.laximo.ru/ru/cat/FindVehicleByPlateNumber
   */
  async findVehicleByPlateNumber(catalogCode: string, plateNumber: string): Promise<LaximoVehicleSearchResult[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:', plateNumber, catalogCode)
      
      const command = `FindVehicleByPlateNumber:Locale=ru_RU|Catalog=${catalogCode}|PlateNumber=${plateNumber}|CountryCode=ru|Localized=true`
      const hmac = this.createHMAC(command)
      
      console.log('üìù FindVehicleByPlateNumber Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      const vehicles = this.parseVehicleSearchResponse(xmlText)
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogCode}`)
      return vehicles
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É:', error)
      return []
    }
  }

  /**
   * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞)
   * @see https://doc.laximo.ru/ru/cat/FindVehicleByPlateNumber
   */
  async findVehicleByPlateNumberGlobal(plateNumber: string): Promise<LaximoVehicleSearchResult[]> {
    try {
      console.log('üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É:', plateNumber)
      
      const command = `FindVehicleByPlateNumber:Locale=ru_RU|PlateNumber=${plateNumber}|CountryCode=ru|Localized=true`
      const hmac = this.createHMAC(command)
      
      console.log('üìù FindVehicleByPlateNumber Global Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      const vehicles = this.parseVehicleSearchResponse(xmlText)
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É –≥–ª–æ–±–∞–ª—å–Ω–æ`)
      return vehicles
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É:', error)
      return []
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
   * @see https://doc.laximo.ru/ru/cat/FindPartReferences
   */
  async findPartReferences(partNumber: string): Promise<string[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', partNumber)
      
      const command = `FindPartReferences:Locale=ru_RU|OEM=${partNumber}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù FindPartReferences Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      const catalogs = this.parsePartReferencesResponse(xmlText)
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${catalogs.length} –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${partNumber}`)
      return catalogs
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', error)
      return []
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
   * @see https://doc.laximo.ru/ru/cat/FindApplicableVehicles
   */
  async findApplicableVehicles(catalogCode: string, partNumber: string): Promise<LaximoVehicleSearchResult[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', partNumber, '–≤ –∫–∞—Ç–∞–ª–æ–≥–µ:', catalogCode)
      
      const command = `FindApplicableVehicles:Locale=ru_RU|Catalog=${catalogCode}|OEM=${partNumber}`
      const hmac = this.createHMAC(command)
      
      console.log('üìù FindApplicableVehicles Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      const vehicles = this.parseVehicleSearchResponse(xmlText)
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogCode}`)
      return vehicles
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', error)
      return []
    }
  }

    /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
   * 1. –ü–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —á–µ—Ä–µ–∑ FindPartReferences
   * 2. –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö —á–µ—Ä–µ–∑ FindApplicableVehicles
   * @see https://doc.laximo.ru/ru/UseCases/SearchString#–ø–æ–∏—Å–∫-–∞–≤—Ç–æ–º–æ–±–∏–ª—è-–ø–æ-–∞—Ä—Ç–∏–∫—É–ª—É
   */
  async findVehiclesByPartNumber(partNumber: string): Promise<LaximoVehiclesByPartResult> {
    try {
      console.log('üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', partNumber)
      
      // –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º
      const catalogs = await this.findPartReferences(partNumber)
      
      if (catalogs.length === 0) {
        console.log('‚ùå –ö–∞—Ç–∞–ª–æ–≥–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        console.log('‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞–ø—á–∞—Å—Ç–µ–π, –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π OEM –Ω–æ–º–µ—Ä')
        return {
          partNumber,
          catalogs: [],
          totalVehicles: 0
        }
      }
      
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${catalogs.length} –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º`)
      
      // –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
      const catalogResults: LaximoCatalogVehicleResult[] = []
      
      for (const catalogCode of catalogs) {
        console.log(`üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${catalogCode}`)
        
        try {
          const vehicles = await this.findApplicableVehicles(catalogCode, partNumber)
          
          if (vehicles.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞
            const catalogInfo = await this.getCatalogInfo(catalogCode)
            
            catalogResults.push({
              catalogCode,
              catalogName: catalogInfo?.name || catalogCode,
              brand: catalogInfo?.brand || catalogCode,
              vehicles,
              vehicleCount: vehicles.length
            })
            
            console.log(`‚úÖ –í –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogCode} –Ω–∞–π–¥–µ–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`)
          } else {
            console.log(`‚ö†Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogCode} –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogCode}:`, error)
        }
      }
      
      const totalVehicles = catalogResults.reduce((sum, catalog) => sum + catalog.vehicleCount, 0)
      
      console.log(`‚úÖ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ ${totalVehicles} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ ${catalogResults.length} –∫–∞—Ç–∞–ª–æ–≥–∞—Ö`)
      
      return {
        partNumber,
        catalogs: catalogResults,
        totalVehicles
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', error)
      return {
        partNumber,
        catalogs: [],
        totalVehicles: 0
      }
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
   */
  private parsePartReferencesResponse(xmlText: string): string[] {
    console.log('üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return []
    }

    console.log('üìÑ XML –¥–ª–∏–Ω–∞:', xmlText.length)
    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç SOAP –¥–ª–∏–Ω–∞:', resultData.length)
    console.log('üìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', resultData.substring(0, 500))

    const catalogs: string[] = []
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã CatalogReference —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º code
    const catalogPattern = /<CatalogReference[^>]*?code="([^"]*)"[^>]*?>/g
    let match
    
    while ((match = catalogPattern.exec(resultData)) !== null) {
      const catalogCode = match[1]
      if (catalogCode && !catalogs.includes(catalogCode)) {
        catalogs.push(catalogCode)
        console.log('üì¶ –ù–∞–π–¥–µ–Ω –∫–∞—Ç–∞–ª–æ–≥:', catalogCode)
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${catalogs.length} –∫–∞—Ç–∞–ª–æ–≥–æ–≤`)
    return catalogs
  }
}

export const laximoService = new LaximoService()
export const laximoDocService = new LaximoDocService()

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —É–∑–ª–æ–≤
export class LaximoUnitService extends LaximoService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∑–ª–µ
   */
  async getUnitInfo(catalogCode: string, vehicleId: string, unitId: string, ssd?: string): Promise<LaximoUnit | null> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∑–ª–µ:', unitId)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { catalogCode, vehicleId, unitId, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º GetUnitInfo —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
      let command = `GetUnitInfo:Locale=ru_RU|Catalog=${catalogCode}|UnitId=${unitId}`
      
      if (ssd && ssd.trim() !== '') {
        command += `|ssd=${ssd}`
      } else {
        command += `|ssd=`
      }
      
      // –í–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      command += `|Localized=true`
      
      const hmac = this.createHMAC(command)
      
      console.log('üìù GetUnitInfo Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseUnitInfoResponse(xmlText, unitId)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–∑–ª–µ:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è ListDetailByUnit API
   */
  async getUnitDetails(catalogCode: string, vehicleId: string, unitId: string, ssd?: string): Promise<LaximoDetail[]> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞:', unitId)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { catalogCode, vehicleId, unitId, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ListDetailByUnit —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
      let command = `ListDetailByUnit:Locale=ru_RU|Catalog=${catalogCode}|UnitId=${unitId}`
      
      if (ssd && ssd.trim() !== '') {
        command += `|ssd=${ssd}`
      } else {
        command += `|ssd=`
      }
      
      // –í–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      command += `|Localized=true`
      
      // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      command += `|WithLinks=true`
      
      const hmac = this.createHMAC(command)
      
      console.log('üìù ListDetailByUnit Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseUnitDetailsResponse(xmlText)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —É–∑–ª–∞:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∑–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è ListImageMapByUnit API
   */
  async getUnitImageMap(catalogCode: string, vehicleId: string, unitId: string, ssd?: string): Promise<LaximoUnitImageMap | null> {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∑–ª–∞:', unitId)
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { catalogCode, vehicleId, unitId, ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' })
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ListImageMapByUnit —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo
      let command = `ListImageMapByUnit:Catalog=${catalogCode}|UnitId=${unitId}`
      
      if (ssd && ssd.trim() !== '') {
        command += `|ssd=${ssd}`
      } else {
        command += `|ssd=`
      }
      
      const hmac = this.createHMAC(command)
      
      console.log('üìù ListImageMapByUnit Command:', command)
      console.log('üîó HMAC:', hmac)
      
      const soapEnvelope = this.createSOAP11Envelope(command, this.login, hmac)
      const xmlText = await this.makeBasicSOAPRequest(this.soap11Url, soapEnvelope, 'urn:QueryDataLogin')
      
      return this.parseUnitImageMapResponse(xmlText, unitId)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∑–ª–∞:', error)
      return null
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GetUnitInfo —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–∑–ª–µ
   */
  private parseUnitInfoResponse(xmlText: string, unitId: string): LaximoUnit | null {
    console.log('üîç –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∑–ª–µ...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return null
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é GetUnitInfo
    const unitInfoMatch = resultData.match(/<GetUnitInfo[^>]*>([\s\S]*?)<\/GetUnitInfo>/) ||
                         resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!unitInfoMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è GetUnitInfo')
      return null
    }

    const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
    const match = rowPattern.exec(unitInfoMatch[1])
    
    if (!match) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —É–∑–ª–∞')
      return null
    }
    
    const attributes = match[1]
    const content = match[2] || ''
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GetUnitInfo
    const name = this.extractAttribute(attributes, 'name')
    const code = this.extractAttribute(attributes, 'code')
    const imageurl = this.extractAttribute(attributes, 'imageurl')
    const largeimageurl = this.extractAttribute(attributes, 'largeimageurl')
    const currentUnitId = this.extractAttribute(attributes, 'unitid')
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const attributePattern = /<attribute\s+key="([^"]*?)"\s+name="([^"]*?)"\s+value="([^"]*?)"\s*\/?>/g
    const unitAttributes: LaximoDetailAttribute[] = []
    let attrMatch
    
    while ((attrMatch = attributePattern.exec(content)) !== null) {
      unitAttributes.push({
        key: attrMatch[1],
        name: attrMatch[2],
        value: attrMatch[3]
      })
    }
    
    // –ò—â–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    const noteAttribute = unitAttributes.find(attr => attr.key === 'note')
    const description = noteAttribute?.value || ''
    
    console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–µ:', { unitId: currentUnitId, name, code, imageurl })
    console.log('üìã –ê—Ç—Ä–∏–±—É—Ç—ã —É–∑–ª–∞:', unitAttributes)
    
    return {
      unitid: currentUnitId || unitId,
      name: name || '',
      code: code || '',
      description: description,
      imageurl: imageurl || undefined,
      largeimageurl: largeimageurl || undefined,
      details: [], // –î–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      attributes: unitAttributes
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ListDetailByUnit —Å –¥–µ—Ç–∞–ª—è–º–∏ —É–∑–ª–∞
   */
  private parseUnitDetailsResponse(xmlText: string): LaximoDetail[] {
    console.log('üîç –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return []
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListDetailsByUnit
    const detailsMatch = resultData.match(/<ListDetailsByUnit[^>]*>([\s\S]*?)<\/ListDetailsByUnit>/) ||
                        resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!detailsMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListDetailsByUnit')
      return []
    }

    const details: LaximoDetail[] = []
    const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
    let match
    
    while ((match = rowPattern.exec(detailsMatch[1])) !== null) {
      const attributes = match[1]
      const content = match[2] || ''
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–µ—Ç–∞–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ListDetailByUnit
      const codeonimage = this.extractAttribute(attributes, 'codeonimage')
      const name = this.extractAttribute(attributes, 'name')
      const oem = this.extractAttribute(attributes, 'oem')
      const ssd = this.extractAttribute(attributes, 'ssd')
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
      const note = this.extractAttribute(attributes, 'note')
      const filter = this.extractAttribute(attributes, 'filter')
      const flag = this.extractAttribute(attributes, 'flag')
      const match_attr = this.extractAttribute(attributes, 'match')
      const designation = this.extractAttribute(attributes, 'designation')
      const applicablemodels = this.extractAttribute(attributes, 'applicablemodels')
      const partspec = this.extractAttribute(attributes, 'partspec')
      const color = this.extractAttribute(attributes, 'color')
      const shape = this.extractAttribute(attributes, 'shape')
      const standard = this.extractAttribute(attributes, 'standard')
      const material = this.extractAttribute(attributes, 'material')
      const size = this.extractAttribute(attributes, 'size')
      const featuredescription = this.extractAttribute(attributes, 'featuredescription')
      const prodstart = this.extractAttribute(attributes, 'prodstart')
      const prodend = this.extractAttribute(attributes, 'prodend')
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const attributePattern = /<attribute\s+key="([^"]*?)"\s+name="([^"]*?)"\s+value="([^"]*?)"\s*\/?>/g
      const detailAttributes: LaximoDetailAttribute[] = []
      let attrMatch
      
      while ((attrMatch = attributePattern.exec(content)) !== null) {
        detailAttributes.push({
          key: attrMatch[1],
          name: attrMatch[2],
          value: attrMatch[3]
        })
      }
      
      if (codeonimage && name && oem) {
        const detail: LaximoDetail = {
          detailid: codeonimage, // –ò—Å–ø–æ–ª—å–∑—É–µ–º codeonimage –∫–∞–∫ detailid
          name,
          oem,
          brand: '', // –ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ ListDetailByUnit
          description: note || '',
          applicablemodels: applicablemodels || '',
          note: note || '',
          attributes: detailAttributes
        }
        
        console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ç–∞–ª—å —É–∑–ª–∞:', { codeonimage, name, oem, note })
        details.push(detail)
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${details.length} –¥–µ—Ç–∞–ª–µ–π —É–∑–ª–∞`)
    return details
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ListImageMapByUnit —Å –∫–∞—Ä—Ç–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∑–ª–∞
   */
  private parseUnitImageMapResponse(xmlText: string, unitId: string): LaximoUnitImageMap | null {
    console.log('üîç –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∑–ª–∞...')
    
    const resultData = this.extractResultData(xmlText)
    if (!resultData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
      return null
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é ListImageMapByUnit
    const imageMapMatch = resultData.match(/<ListImageMapByUnit[^>]*>([\s\S]*?)<\/ListImageMapByUnit>/) ||
                         resultData.match(/<response[^>]*>([\s\S]*?)<\/response>/)
    
    if (!imageMapMatch) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è ListImageMapByUnit')
      return null
    }

    const coordinates: LaximoImageCoordinate[] = []
    const rowPattern = /<row([^>]*?)(?:\s*\/>|>([\s\S]*?)<\/row>)/g
    let match
    
    while ((match = rowPattern.exec(imageMapMatch[1])) !== null) {
      const attributes = match[1]
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ListImageMapByUnit
      const code = this.extractAttribute(attributes, 'code')
      const type = this.extractAttribute(attributes, 'type')
      const x1 = parseInt(this.extractAttribute(attributes, 'x1') || '0')
      const y1 = parseInt(this.extractAttribute(attributes, 'y1') || '0')
      const x2 = parseInt(this.extractAttribute(attributes, 'x2') || '0')
      const y2 = parseInt(this.extractAttribute(attributes, 'y2') || '0')
      
      if (code) {
        coordinates.push({
          detailid: code, // –ò—Å–ø–æ–ª—å–∑—É–µ–º code –∫–∞–∫ detailid
          codeonimage: code,
          x: x1,
          y: y1,
          width: x2 - x1,
          height: y2 - y1,
          shape: type === '0' ? 'rect' : 'circle' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ type=0 —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        })
        
        console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞:', { code, type, x1, y1, x2, y2 })
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${coordinates.length} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`)
    
    // –î–ª—è ListImageMapByUnit –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ GetUnitInfo
    return {
      unitid: unitId,
      imageurl: '', // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ GetUnitInfo
      largeimageurl: '',
      coordinates
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
export const laximoUnitService = new LaximoUnitService() 