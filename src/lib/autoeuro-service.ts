import axios from 'axios';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è AutoEuro API
export interface AutoEuroSearchParams {
  code: string;
  brand: string;
  delivery_key?: string;
  with_crosses?: boolean;
  with_offers?: boolean;
}

export interface AutoEuroBrandResult {
  brand: string;
  code: string;
  name: string;
}

export interface AutoEuroBrandSearchResult {
  success: boolean;
  data?: AutoEuroBrandResult[];
  error?: string;
  message?: string;
}

export interface AutoEuroOffer {
  offer_key: string;
  stock: number;
  cross: string | null;
  brand: string;
  code: string;
  name: string;
  packing: number;
  price: string | number;
  currency: string;
  amount: number;
  unit: string;
  return: string | number;
  order_before: string;
  delivery_time: string;
  delivery_time_max: string;
  rejects: number;
  dealer: number;
  warehouse_name: string | null;
  warehouse_key: string;
  ttl: number;
}

export interface AutoEuroSearchResult {
  success: boolean;
  data?: AutoEuroOffer[];
  error?: string;
  message?: string;
}

export interface AutoEuroBalance {
  balance: number;
  currency: string;
  status: string;
}

export interface AutoEuroDelivery {
  delivery_key: string;
  name: string;
  description?: string;
}

class AutoEuroService {
  private readonly apiKey: string;
  private readonly baseUrl: string;
  private deliveryKey: string | null = null;

  constructor() {
    this.apiKey = process.env.AUTOEURO_API_KEY || 'U4Zr3LCTyziNYqVAkqVNKgZ1vPkPtKf2QBWlPDdUFbhW8Fj2rIvPfFrfwvNy';
    this.baseUrl = 'https://api.autoeuro.ru/api/v2/json';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ delivery_key
   */
  private async getDeliveryKey(): Promise<string> {
    if (this.deliveryKey) {
      return this.deliveryKey!;
    }

    try {
      console.log('üöö AutoEuro: –ø–æ–ª—É—á–µ–Ω–∏–µ delivery_key...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
      const url = `${this.baseUrl}/get_deliveries/${this.apiKey}`;

      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'ProtekautoAPI/1.0',
          'Accept': 'application/json'
        }
      });

      console.log('üì¶ AutoEuro deliveries response:', JSON.stringify(response.data, null, 2));

      if (response.data && response.data.DATA && Array.isArray(response.data.DATA) && response.data.DATA.length > 0) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç–∞–≤–∫–∏
        this.deliveryKey = response.data.DATA[0].delivery_key;
        console.log('‚úÖ AutoEuro: –ø–æ–ª—É—á–µ–Ω delivery_key:', this.deliveryKey);
        return this.deliveryKey!;
      }

      // –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π
      // –≠—Ç–∏ –∫–ª—é—á–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API
      const knownWorkingKeys = [
        'Yxov1KCdAii0deRp3HepSJz8wcxasI6FJzCbgkkDgHbY9hrszkUNTsEuZYBmJUwOEPb2iIb01uSVTJYQWkRv05qrVm4c', // –ú–æ—Å–∫–≤–∞
        'Hm1US0UBM4anOYjgZEGTjwNK3Qs6K4f6BHyagkkDgHbY9hrszkUNTsEuZYBmJUwOEPb2iIb01uSVTJYQWkRv05qrVm4c', // –°–ü–±
        'dw22tcIui0s4W0AJ642fosufCJaCZBZoY84bgkkDgHbY9hrszkUNTsEuZYBmJUwOEPb2iIb01uSVTJYQWkRv05qrVm4c'  // –ö–∞–∑–∞–Ω—å
      ];

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á
      for (const key of knownWorkingKeys) {
        try {
          const testUrl = `${this.baseUrl}/search_items/${this.apiKey}`;
          const testParams = new URLSearchParams({
            code: 'TEST123',
            brand: 'BOSCH',
            delivery_key: key
          });

          const testResponse = await axios.get(`${testUrl}?${testParams.toString()}`, {
            timeout: 3000,
            headers: {
              'User-Agent': 'ProtekautoAPI/1.0',
              'Accept': 'application/json'
            }
          });

          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–∫–∏ delivery_key, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –∫–ª—é—á
          if (!testResponse.data?.ERROR?.error?.includes('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')) {
            this.deliveryKey = key;
            console.log('‚úÖ AutoEuro: –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π delivery_key:', this.deliveryKey);
            return this.deliveryKey!;
          }
          
        } catch (error: any) {
          if (error.response?.data?.ERROR?.error !== '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏') {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å delivery_key, –∑–Ω–∞—á–∏—Ç –∫–ª—é—á —Ä–∞–±–æ—á–∏–π
            this.deliveryKey = key;
            console.log('‚úÖ AutoEuro: –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π delivery_key:', this.deliveryKey);
            return this.deliveryKey!;
          }
        }
      }

      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
      this.deliveryKey = knownWorkingKeys[0];
      console.log('‚ö†Ô∏è AutoEuro: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback delivery_key:', this.deliveryKey);
      return this.deliveryKey!;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è delivery_key:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π
      this.deliveryKey = 'Yxov1KCdAii0deRp3HepSJz8wcxasI6FJzCbgkkDgHbY9hrszkUNTsEuZYBmJUwOEPb2iIb01uSVTJYQWkRv05qrVm4c'; // –ú–æ—Å–∫–≤–∞
      console.log('‚ö†Ô∏è AutoEuro: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π delivery_key:', this.deliveryKey);
      return this.deliveryKey!;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ AutoEuro
   */
  async searchItems(params: AutoEuroSearchParams): Promise<AutoEuroSearchResult> {
    try {
      console.log('üîç AutoEuro: –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤', params);

      const searchParams = new URLSearchParams({
        code: params.code,
        brand: params.brand,
        delivery_key: params.delivery_key || await this.getDeliveryKey(),
      });

      if (params.with_crosses) {
        searchParams.append('with_crosses', '1');
      }
      
      if (params.with_offers) {
        searchParams.append('with_offers', '1');
      }

      const url = `${this.baseUrl}/search_items/${this.apiKey}?${searchParams.toString()}`;
      
      console.log('üìù AutoEuro URL:', url);

      const response = await axios.get(url, {
        timeout: 10000,
        headers: {
          'User-Agent': 'ProtekautoAPI/1.0',
          'Accept': 'application/json'
        }
      });

      console.log('‚úÖ AutoEuro –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. Status:', response.status);
      console.log('üìÑ AutoEuro response headers:', response.headers);
      console.log('üì¶ AutoEuro response data type:', typeof response.data);
      console.log('üì¶ AutoEuro response data length:', Array.isArray(response.data) ? response.data.length : 'not array');
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (response.data) {
        console.log('üì¶ AutoEuro response structure:', Object.keys(response.data));
        console.log('üì¶ AutoEuro response (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', JSON.stringify(response.data, null, 2).substring(0, 500));
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (Array.isArray(response.data) && response.data.length > 0) {
        console.log('üì¶ AutoEuro –ø–µ—Ä–≤—ã–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞:', JSON.stringify(response.data.slice(0, 2), null, 2));
      }

      // AutoEuro API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å META –∏ DATA –ø–æ–ª—è–º–∏
      if (response.data && response.data.META && response.data.DATA) {
        console.log('‚úÖ AutoEuro: —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', response.data.DATA.length);
        return {
          success: true,
          data: response.data.DATA
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –∏–∑–º–µ–Ω–∏—Ç—Å—è)
      if (response.data && Array.isArray(response.data)) {
        console.log('‚úÖ AutoEuro: —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞—Å—Å–∏–≤), –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', response.data.length);
        return {
          success: true,
          data: response.data
        };
      } 
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      if (response.data) {
        console.log('‚ö†Ô∏è AutoEuro: –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
        console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AutoEuro (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):', JSON.stringify(response.data, null, 2).substring(0, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        const errorMessage = response.data?.ERROR?.error || response.data?.META?.error || response.data?.error;
        
        if (errorMessage) {
          console.log('‚ö†Ô∏è AutoEuro –æ—à–∏–±–∫–∞:', errorMessage);
          return {
            success: false,
            error: errorMessage
          };
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π –æ—à–∏–±–∫–∏, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return {
          success: false,
          error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ AutoEuro API - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
        };
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–æ–±—â–µ
      console.log('‚ö†Ô∏è AutoEuro: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      return {
        success: false,
        error: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AutoEuro API'
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AutoEuro API:', error);
      
      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response headers:', error.response.headers);
        console.error('Response data:', JSON.stringify(error.response.data, null, 2));
      }
      
      if (error.request) {
        console.error('Request config:', error.config);
        console.error('Request timeout:', error.timeout);
      }

      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AutoEuro API'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async getBalance(): Promise<AutoEuroBalance | null> {
    try {
      console.log('üí∞ AutoEuro: –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');

      const url = `${this.baseUrl}/get_balance/${this.apiKey}`;
      
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'ProtekautoAPI/1.0',
          'Accept': 'application/json'
        }
      });

      if (response.data && response.data.success) {
        return response.data.data;
      }

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ AutoEuro:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤
   */
  async getBrands(): Promise<string[]> {
    try {
      console.log('üè∑Ô∏è AutoEuro: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤');

      const url = `${this.baseUrl}/get_brands/${this.apiKey}`;
      
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'ProtekautoAPI/1.0',
          'Accept': 'application/json'
        }
      });

      if (response.data && response.data.success && response.data.data) {
        return response.data.data.map((brand: any) => brand.name || brand);
      }

      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ AutoEuro:', error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–∞ –ø–æ –∫–æ–¥—É
   */
  async searchBrands(query: string): Promise<string[]> {
    try {
      console.log('üîç AutoEuro: –ø–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);

      const url = `${this.baseUrl}/search_brands/${this.apiKey}?brand=${encodeURIComponent(query)}`;
      
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'ProtekautoAPI/1.0',
          'Accept': 'application/json'
        }
      });

      if (response.data && response.data.success && response.data.data) {
        return response.data.data.map((brand: any) => brand.name || brand);
      }

      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ AutoEuro:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏—Å–∫–æ–º—ã–π –∞—Ä—Ç–∏–∫—É–ª
   */
  async getBrandsByCode(code: string): Promise<AutoEuroBrandSearchResult> {
    try {
      console.log('üîç AutoEuro: –ø–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–¥—É –∞—Ä—Ç–∏–∫—É–ª–∞:', code);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: /search_brands/
      // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ POST –∑–∞–ø—Ä–æ—Å
      const url = `${this.baseUrl}/search_brands/${this.apiKey}`;
      
      let response;
      try {
        console.log('üîÑ AutoEuro: –ø—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å...');
        response = await axios.post(url, {
          code: code.trim()
        }, {
          timeout: 10000,
          headers: {
            'User-Agent': 'ProtekautoAPI/1.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });
      } catch (postError) {
        console.log('‚ö†Ô∏è AutoEuro: POST –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º GET...');
        // –ï—Å–ª–∏ POST –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å
        const getUrl = `${this.baseUrl}/search_brands/${this.apiKey}?code=${encodeURIComponent(code.trim())}`;
        response = await axios.get(getUrl, {
          timeout: 10000,
          headers: {
            'User-Agent': 'ProtekautoAPI/1.0',
            'Accept': 'application/json'
          }
        });
      }

      console.log('‚úÖ AutoEuro brands response status:', response.status);
      console.log('üì¶ AutoEuro brands response data type:', typeof response.data);
      
      if (response.data) {
        console.log('üì¶ AutoEuro brands response structure:', Object.keys(response.data));
        console.log('üì¶ AutoEuro brands response (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', JSON.stringify(response.data, null, 2).substring(0, 500));
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ API
      if (response.data && response.data.META && response.data.DATA) {
        console.log('‚úÖ AutoEuro: –Ω–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤:', response.data.DATA.length);
        return {
          success: true,
          data: response.data.DATA.map((item: any) => ({
            brand: item.brand || item.name || item,
            code: item.code || code,
            name: item.name || item.description || item.brand || item
          }))
        };
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
      if (response.data && Array.isArray(response.data)) {
        console.log('‚úÖ AutoEuro: –Ω–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤ (–º–∞—Å—Å–∏–≤):', response.data.length);
        return {
          success: true,
          data: response.data.map((item: any) => ({
            brand: item.brand || item.name || item,
            code: item.code || code,
            name: item.name || item.description || item.brand || item
          }))
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
      const errorMessage = response.data?.ERROR?.error || response.data?.META?.error || response.data?.error;
      if (errorMessage) {
        console.log('‚ö†Ô∏è AutoEuro brands –æ—à–∏–±–∫–∞:', errorMessage);
        return {
          success: false,
          error: errorMessage
        };
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      console.log('‚ö†Ô∏è AutoEuro: –±—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞:', code);
      return {
        success: true,
        data: []
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–¥—É AutoEuro:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
   */
  async getDeliveries(): Promise<AutoEuroDelivery[]> {
    try {
      console.log('üöö AutoEuro: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏');

      const url = `${this.baseUrl}/get_deliveries/${this.apiKey}`;
      
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'ProtekautoAPI/1.0',
          'Accept': 'application/json'
        }
      });

      if (response.data && response.data.DATA && Array.isArray(response.data.DATA) && response.data.DATA.length > 0) {
        console.log('‚úÖ AutoEuro: –ø–æ–ª—É—á–µ–Ω—ã —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:', response.data.DATA.length);
        return response.data.DATA.map((delivery: any) => ({
          delivery_key: delivery.delivery_key,
          name: delivery.delivery_name,
          description: delivery.delivery_name
        }));
      }

      console.log('‚ö†Ô∏è AutoEuro: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–æ—Å–æ–±–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π');
      return [{
        delivery_key: 'Yxov1KCdAii0deRp3HepSJz8wcxasI6FJzCbgkkDgHbY9hrszkUNTsEuZYBmJUwOEPb2iIb01uSVTJYQWkRv05qrVm4c',
        name: '–°–∞–º–æ–≤—ã–≤–æ–∑ –≥.–ú–æ—Å–∫–≤–∞',
        description: '–°–∞–º–æ–≤—ã–≤–æ–∑ –≥.–ú–æ—Å–∫–≤–∞ (–ú–û,–ò—Å—Ç—Ä–∏–Ω—Å–∫–∏–π —Ä-–Ω,–ü–∞–≤–ª–æ–≤—Å–∫–∞—è –°–ª–æ–±–æ–¥–∞,—É–ª.–õ–µ–Ω–∏–Ω–∞,76,—Å—Ç—Ä.2,–ø–∞–≤.28)'
      }];

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ AutoEuro:', error);
      
      return [{
        delivery_key: 'Yxov1KCdAii0deRp3HepSJz8wcxasI6FJzCbgkkDgHbY9hrszkUNTsEuZYBmJUwOEPb2iIb01uSVTJYQWkRv05qrVm4c',
        name: '–°–∞–º–æ–≤—ã–≤–æ–∑ –≥.–ú–æ—Å–∫–≤–∞',
        description: '–°–∞–º–æ–≤—ã–≤–æ–∑ –≥.–ú–æ—Å–∫–≤–∞ (–ú–û,–ò—Å—Ç—Ä–∏–Ω—Å–∫–∏–π —Ä-–Ω,–ü–∞–≤–ª–æ–≤—Å–∫–∞—è –°–ª–æ–±–æ–¥–∞,—É–ª.–õ–µ–Ω–∏–Ω–∞,76,—Å—Ç—Ä.2,–ø–∞–≤.28)'
      }];
    }
  }
}

export const autoEuroService = new AutoEuroService(); 